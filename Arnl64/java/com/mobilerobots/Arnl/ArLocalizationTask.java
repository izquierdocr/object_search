/*
Adept MobileRobots Advanced Robotics Navigation and Localization (ARNL)
Version 1.9.0

Copyright (C) 2004, 2005 ActivMedia Robotics LLC
Copyright (C) 2006-2009 MobileRobots Inc.
Copyright (C) 2010-2014 Adept Technology, Inc.

All Rights Reserved.

Adept MobileRobots does not make any representations about the
suitability of this software for any purpose.  It is provided "as is"
without express or implied warranty.

The license for this software is distributed as LICENSE.txt in the top
level directory.

robots@mobilerobots.com
Adept MobileRobots
10 Columbia Drive
Amherst, NH 03031
+1-603-881-7960

*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Arnl;

  import com.mobilerobots.Aria.*;
  import com.mobilerobots.ArNetworking.*;
  import com.mobilerobots.BaseArnl.*;

public class ArLocalizationTask extends ArBaseLocalizationTask {
  private long swigCPtr;

  /* for internal use by swig only */
  public ArLocalizationTask(long cPtr, boolean cMemoryOwn) {
    super(ArnlJavaJNI.SWIGArLocalizationTaskUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArLocalizationTask obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArnlJavaJNI.delete_ArLocalizationTask(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ArLocalizationTask(ArRobot robot, ArRangeDevice laser, String mapName) {
    this(ArnlJavaJNI.new_ArLocalizationTask__SWIG_0(ArRobot.getCPtr(robot), robot, ArRangeDevice.getCPtr(laser), laser, mapName), true);
  }

  public ArLocalizationTask(ArRobot robot, ArRangeDevice laser, ArMapInterface ariaMap, boolean noReflectors) {
    this(ArnlJavaJNI.new_ArLocalizationTask__SWIG_1(ArRobot.getCPtr(robot), robot, ArRangeDevice.getCPtr(laser), laser, ArMapInterface.getCPtr(ariaMap), ariaMap, noReflectors), true);
  }

  public ArLocalizationTask(ArRobot robot, ArRangeDevice laser, ArMapInterface ariaMap) {
    this(ArnlJavaJNI.new_ArLocalizationTask__SWIG_2(ArRobot.getCPtr(robot), robot, ArRangeDevice.getCPtr(laser), laser, ArMapInterface.getCPtr(ariaMap), ariaMap), true);
  }

  public boolean localizeRobotInMapInit(ArPose given, int numSamples, double stdX, double stdY, double stdT, double thresFactor, boolean warn, boolean setInitializedToFalse, boolean rayTrace) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotInMapInit__SWIG_0(swigCPtr, this, ArPose.getCPtr(given), given, numSamples, stdX, stdY, stdT, thresFactor, warn, setInitializedToFalse, rayTrace);
  }

  public boolean localizeRobotInMapInit(ArPose given, int numSamples, double stdX, double stdY, double stdT, double thresFactor, boolean warn, boolean setInitializedToFalse) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotInMapInit__SWIG_1(swigCPtr, this, ArPose.getCPtr(given), given, numSamples, stdX, stdY, stdT, thresFactor, warn, setInitializedToFalse);
  }

  public boolean localizeRobotInMapInit(ArPose given, int numSamples, double stdX, double stdY, double stdT, double thresFactor, boolean warn) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotInMapInit__SWIG_2(swigCPtr, this, ArPose.getCPtr(given), given, numSamples, stdX, stdY, stdT, thresFactor, warn);
  }

  public boolean localizeRobotInMapInit(ArPose given, int numSamples, double stdX, double stdY, double stdT, double thresFactor) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotInMapInit__SWIG_3(swigCPtr, this, ArPose.getCPtr(given), given, numSamples, stdX, stdY, stdT, thresFactor);
  }

  public boolean localizeRobotInMapMoved(int numSamples, double distFactor, double angFactor, double thresFactor) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotInMapMoved(swigCPtr, this, numSamples, distFactor, angFactor, thresFactor);
  }

  public boolean localizeRobotAtHomeBlocking(double distSpread, double angleSpread, double probThreshold) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_0(swigCPtr, this, distSpread, angleSpread, probThreshold);
  }

  public boolean localizeRobotAtHomeBlocking(double spreadX, double spreadY, double angleSpread, double probThreshold) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_1(swigCPtr, this, spreadX, spreadY, angleSpread, probThreshold);
  }

  public boolean localizeRobotAtHomeBlocking(double distSpread, double angleSpread) {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_2(swigCPtr, this, distSpread, angleSpread);
  }

  public boolean localizeRobotAtHomeBlocking() {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_3(swigCPtr, this);
  }

  public boolean localizeRobotAtHomeNonBlocking() {
    return ArnlJavaJNI.ArLocalizationTask_localizeRobotAtHomeNonBlocking(swigCPtr, this);
  }

  public ArPose getRobotHome() {
    return new ArPose(ArnlJavaJNI.ArLocalizationTask_getRobotHome(swigCPtr, this), true);
  }

  public void setForceUpdateParams(int numSamples, double xStd, double yStd, double tStd) {
    ArnlJavaJNI.ArLocalizationTask_setForceUpdateParams(swigCPtr, this, numSamples, xStd, yStd, tStd);
  }

  public void forceUpdatePose(ArPose forcePose, boolean rayTrace) {
    ArnlJavaJNI.ArLocalizationTask_forceUpdatePose__SWIG_0(swigCPtr, this, ArPose.getCPtr(forcePose), forcePose, rayTrace);
  }

  public void forceUpdatePose(ArPose forcePose) {
    ArnlJavaJNI.ArLocalizationTask_forceUpdatePose__SWIG_1(swigCPtr, this, ArPose.getCPtr(forcePose), forcePose);
  }

  public void addFailedLocalizationCB(ArFunctor1_Int functor) {
    ArnlJavaJNI.ArLocalizationTask_addFailedLocalizationCB(swigCPtr, this, ArFunctor1_Int.getCPtr(functor), functor);
  }

  public void remFailedLocalizationCB(ArFunctor1_Int functor) {
    ArnlJavaJNI.ArLocalizationTask_remFailedLocalizationCB(swigCPtr, this, ArFunctor1_Int.getCPtr(functor), functor);
  }

  public boolean setGridResolution(double res, ArMapInterface ariaMap) {
    return ArnlJavaJNI.ArLocalizationTask_setGridResolution(swigCPtr, this, res, ArMapInterface.getCPtr(ariaMap), ariaMap);
  }

  public void setFailedCallBack(ArFunctor1_Int fcb) {
    ArnlJavaJNI.ArLocalizationTask_setFailedCallBack(swigCPtr, this, ArFunctor1_Int.getCPtr(fcb), fcb);
  }

  public void setTriggerDelR(double tr) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerDelR(swigCPtr, this, tr);
  }

  public void setTriggerDelT(double tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerDelT(swigCPtr, this, tt);
  }

  public void setTriggerTimeFlag(boolean tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerTimeFlag(swigCPtr, this, tt);
  }

  public void setTriggerTime(double tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerTime(swigCPtr, this, tt);
  }

  public void setTriggerTimeX(double tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerTimeX(swigCPtr, this, tt);
  }

  public void setTriggerTimeY(double tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerTimeY(swigCPtr, this, tt);
  }

  public void setTriggerTimeTh(double tt) {
    ArnlJavaJNI.ArLocalizationTask_setTriggerTimeTh(swigCPtr, this, tt);
  }

  public void setNumSamples(int n) {
    ArnlJavaJNI.ArLocalizationTask_setNumSamples(swigCPtr, this, n);
  }

  public void setNumSamplesAtInit(int n) {
    ArnlJavaJNI.ArLocalizationTask_setNumSamplesAtInit(swigCPtr, this, n);
  }

  public void setRayTraceAtInit(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setRayTraceAtInit(swigCPtr, this, f);
  }

  public void setCurrentNumSamples(int n) {
    ArnlJavaJNI.ArLocalizationTask_setCurrentNumSamples(swigCPtr, this, n);
  }

  public void setPassThreshold(double f) {
    ArnlJavaJNI.ArLocalizationTask_setPassThreshold(swigCPtr, this, f);
  }

  public void setLostThreshold(double f) {
    ArnlJavaJNI.ArLocalizationTask_setLostThreshold(swigCPtr, this, f);
  }

  public void setSensorBelief(double sensorBelief) {
    ArnlJavaJNI.ArLocalizationTask_setSensorBelief(swigCPtr, this, sensorBelief);
  }

  public void setCurrentLocaPose(double x, double y, double th) {
    ArnlJavaJNI.ArLocalizationTask_setCurrentLocaPose__SWIG_0(swigCPtr, this, x, y, th);
  }

  public void setCurrentLocaPose(ArPose p) {
    ArnlJavaJNI.ArLocalizationTask_setCurrentLocaPose__SWIG_1(swigCPtr, this, ArPose.getCPtr(p), p);
  }

  public void setVerboseFlag(boolean a) {
    ArnlJavaJNI.ArLocalizationTask_setVerboseFlag(swigCPtr, this, a);
  }

  public void setAngleIncrement(double f) {
    ArnlJavaJNI.ArLocalizationTask_setAngleIncrement(swigCPtr, this, f);
  }

  public void setKillThreshold(double f) {
    ArnlJavaJNI.ArLocalizationTask_setKillThreshold(swigCPtr, this, f);
  }

  public void setRecoverOnFailedFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setRecoverOnFailedFlag(swigCPtr, this, f);
  }

  public void setIdleFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setIdleFlag(swigCPtr, this, f);
  }

  public void setReloadingMapFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setReloadingMapFlag(swigCPtr, this, f);
  }

  public void setEnableReflectorLocalizationFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setEnableReflectorLocalizationFlag(swigCPtr, this, f);
  }

  public void setReflectorVar(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorVar(swigCPtr, this, f);
  }

  public void setReflectorMatchDist(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorMatchDist(swigCPtr, this, f);
  }

  public void setReflectorMatchAngle(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorMatchAngle(swigCPtr, this, f);
  }

  public void setReflectorMaxRange(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorMaxRange(swigCPtr, this, f);
  }

  public void setReflectorMaxAngle(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorMaxAngle(swigCPtr, this, f);
  }

  public void setReflectorSize(double f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectorSize(swigCPtr, this, f);
  }

  public void setReflectanceThreshold(int f) {
    ArnlJavaJNI.ArLocalizationTask_setReflectanceThreshold(swigCPtr, this, f);
  }

  public void setBypassMCLFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setBypassMCLFlag(swigCPtr, this, f);
  }

  public void getForceUpdateParams(ArPose forcePose, SWIGTYPE_p_int numSamples, SWIGTYPE_p_double xStd, SWIGTYPE_p_double yStd, SWIGTYPE_p_double tStd) {
    ArnlJavaJNI.ArLocalizationTask_getForceUpdateParams(swigCPtr, this, ArPose.getCPtr(forcePose), forcePose, SWIGTYPE_p_int.getCPtr(numSamples), SWIGTYPE_p_double.getCPtr(xStd), SWIGTYPE_p_double.getCPtr(yStd), SWIGTYPE_p_double.getCPtr(tStd));
  }

  public boolean getVerboseFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getVerboseFlag(swigCPtr, this);
  }

  public boolean getInitializedFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getInitializedFlag(swigCPtr, this);
  }

  public int getNumSamples() {
    return ArnlJavaJNI.ArLocalizationTask_getNumSamples(swigCPtr, this);
  }

  public int getNumSamplesAtInit() {
    return ArnlJavaJNI.ArLocalizationTask_getNumSamplesAtInit(swigCPtr, this);
  }

  public boolean getRayTraceAtInit() {
    return ArnlJavaJNI.ArLocalizationTask_getRayTraceAtInit(swigCPtr, this);
  }

  public int getCurrentNumSamples() {
    return ArnlJavaJNI.ArLocalizationTask_getCurrentNumSamples(swigCPtr, this);
  }

  public ArPose getRobotMaxProbPose() {
    return new ArPose(ArnlJavaJNI.ArLocalizationTask_getRobotMaxProbPose(swigCPtr, this), true);
  }

  public double getTriggerDelR() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerDelR(swigCPtr, this);
  }

  public double getTriggerDelT() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerDelT(swigCPtr, this);
  }

  public boolean getTriggerTimeFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerTimeFlag(swigCPtr, this);
  }

  public double getTriggerTime() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerTime(swigCPtr, this);
  }

  public double getTriggerTimeX() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerTimeX(swigCPtr, this);
  }

  public double getTriggerTimeY() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerTimeY(swigCPtr, this);
  }

  public double getTriggerTimeTh() {
    return ArnlJavaJNI.ArLocalizationTask_getTriggerTimeTh(swigCPtr, this);
  }

  public double getPassThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getPassThreshold(swigCPtr, this);
  }

  public double getLostThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getLostThreshold(swigCPtr, this);
  }

  public double getUsingPassThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getUsingPassThreshold(swigCPtr, this);
  }

  public void setTempPassThreshold(double passThreshold) {
    ArnlJavaJNI.ArLocalizationTask_setTempPassThreshold(swigCPtr, this, passThreshold);
  }

  public double getTempPassThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getTempPassThreshold(swigCPtr, this);
  }

  public void clearTempPassThreshold() {
    ArnlJavaJNI.ArLocalizationTask_clearTempPassThreshold(swigCPtr, this);
  }

  public double getLocalizationScore() {
    return ArnlJavaJNI.ArLocalizationTask_getLocalizationScore(swigCPtr, this);
  }

  public double getLocalizationThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getLocalizationThreshold(swigCPtr, this);
  }

  public double getMCLocalizationScore() {
    return ArnlJavaJNI.ArLocalizationTask_getMCLocalizationScore(swigCPtr, this);
  }

  public double getRefLocalizationScore() {
    return ArnlJavaJNI.ArLocalizationTask_getRefLocalizationScore(swigCPtr, this);
  }

  public double getSensorBelief() {
    return ArnlJavaJNI.ArLocalizationTask_getSensorBelief__SWIG_0(swigCPtr, this);
  }

  public ArPose getCurrentLocaPose() {
    return new ArPose(ArnlJavaJNI.ArLocalizationTask_getCurrentLocaPose(swigCPtr, this), true);
  }

  public double getStdX() {
    return ArnlJavaJNI.ArLocalizationTask_getStdX(swigCPtr, this);
  }

  public double getStdY() {
    return ArnlJavaJNI.ArLocalizationTask_getStdY(swigCPtr, this);
  }

  public double getStdTh() {
    return ArnlJavaJNI.ArLocalizationTask_getStdTh(swigCPtr, this);
  }

  public double getErrorMmPerMm() {
    return ArnlJavaJNI.ArLocalizationTask_getErrorMmPerMm(swigCPtr, this);
  }

  public double getErrorDegPerDeg() {
    return ArnlJavaJNI.ArLocalizationTask_getErrorDegPerDeg(swigCPtr, this);
  }

  public double getErrorDegPerMm() {
    return ArnlJavaJNI.ArLocalizationTask_getErrorDegPerMm(swigCPtr, this);
  }

  public double getPeakFactor() {
    return ArnlJavaJNI.ArLocalizationTask_getPeakFactor(swigCPtr, this);
  }

  public double getOccThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getOccThreshold(swigCPtr, this);
  }

  public double getGridRes() {
    return ArnlJavaJNI.ArLocalizationTask_getGridRes(swigCPtr, this);
  }

  public String getMapName() {
    return ArnlJavaJNI.ArLocalizationTask_getMapName(swigCPtr, this);
  }

  public double getPeturbRangeX() {
    return ArnlJavaJNI.ArLocalizationTask_getPeturbRangeX(swigCPtr, this);
  }

  public double getPeturbRangeY() {
    return ArnlJavaJNI.ArLocalizationTask_getPeturbRangeY(swigCPtr, this);
  }

  public double getPeturbRangeTh() {
    return ArnlJavaJNI.ArLocalizationTask_getPeturbRangeTh(swigCPtr, this);
  }

  public double getFailedRangeX() {
    return ArnlJavaJNI.ArLocalizationTask_getFailedRangeX(swigCPtr, this);
  }

  public double getFailedRangeY() {
    return ArnlJavaJNI.ArLocalizationTask_getFailedRangeY(swigCPtr, this);
  }

  public double getFailedRangeTh() {
    return ArnlJavaJNI.ArLocalizationTask_getFailedRangeTh(swigCPtr, this);
  }

  public double getPeakStdX() {
    return ArnlJavaJNI.ArLocalizationTask_getPeakStdX(swigCPtr, this);
  }

  public double getPeakStdY() {
    return ArnlJavaJNI.ArLocalizationTask_getPeakStdY(swigCPtr, this);
  }

  public double getPeakStdTh() {
    return ArnlJavaJNI.ArLocalizationTask_getPeakStdTh(swigCPtr, this);
  }

  public double getAngleIncrement() {
    return ArnlJavaJNI.ArLocalizationTask_getAngleIncrement(swigCPtr, this);
  }

  public double getKillThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getKillThreshold(swigCPtr, this);
  }

  public ArMapInterface getAriaMap() {
    long cPtr = ArnlJavaJNI.ArLocalizationTask_getAriaMap(swigCPtr, this);
    return (cPtr == 0) ? null : new ArMapInterface(cPtr, false);
  }

  public int getBufferSize() {
    return ArnlJavaJNI.ArLocalizationTask_getBufferSize(swigCPtr, this);
  }

  public SWIGTYPE_p_std__vectorT_ArPose_t getXYBuffer() {
    return new SWIGTYPE_p_std__vectorT_ArPose_t(ArnlJavaJNI.ArLocalizationTask_getXYBuffer(swigCPtr, this), true);
  }

  public ArPose getBufferPose() {
    return new ArPose(ArnlJavaJNI.ArLocalizationTask_getBufferPose(swigCPtr, this), true);
  }

  public SWIGTYPE_p_ArOccGrid getOccGridPtr() {
    long cPtr = ArnlJavaJNI.ArLocalizationTask_getOccGridPtr(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ArOccGrid(cPtr, false);
  }

  public ArPoseList getCurrentSamplePoses() {
    return new ArPoseList(ArnlJavaJNI.ArLocalizationTask_getCurrentSamplePoses(swigCPtr, this), true);
  }

  public boolean getRecoverOnFailedFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getRecoverOnFailedFlag(swigCPtr, this);
  }

  public boolean getIgnoreIllegalPoseFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getIgnoreIllegalPoseFlag(swigCPtr, this);
  }

  public boolean getAdjustNumSamplesFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getAdjustNumSamplesFlag(swigCPtr, this);
  }

  public int getMinNumSamples() {
    return ArnlJavaJNI.ArLocalizationTask_getMinNumSamples(swigCPtr, this);
  }

  public double getNumSamplesAngleFactor() {
    return ArnlJavaJNI.ArLocalizationTask_getNumSamplesAngleFactor(swigCPtr, this);
  }

  public boolean getSensorSetFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getSensorSetFlag(swigCPtr, this);
  }

  public boolean getEnableReflectorLocalizationFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getEnableReflectorLocalizationFlag(swigCPtr, this);
  }

  public double getReflectorVar() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorVar(swigCPtr, this);
  }

  public double getReflectorMatchDist() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorMatchDist(swigCPtr, this);
  }

  public double getReflectorMatchAngle() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorMatchAngle(swigCPtr, this);
  }

  public double getReflectorMaxRange() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorMaxRange(swigCPtr, this);
  }

  public double getReflectorMaxAngle() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorMaxAngle(swigCPtr, this);
  }

  public double getReflectorSize() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorSize(swigCPtr, this);
  }

  public int getReflectanceThreshold() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectanceThreshold(swigCPtr, this);
  }

  public boolean getBypassMCLFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getBypassMCLFlag(swigCPtr, this);
  }

  public double getReflectorTriDistLimit() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorTriDistLimit(swigCPtr, this);
  }

  public double getReflectorTriAngLimit() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorTriAngLimit(swigCPtr, this);
  }

  public double getBadReflectorFactor() {
    return ArnlJavaJNI.ArLocalizationTask_getBadReflectorFactor(swigCPtr, this);
  }

  public double getReflectorRangeFactor() {
    return ArnlJavaJNI.ArLocalizationTask_getReflectorRangeFactor(swigCPtr, this);
  }

  public SWIGTYPE_p_ArMatrix getQParams() {
    return new SWIGTYPE_p_ArMatrix(ArnlJavaJNI.ArLocalizationTask_getQParams(swigCPtr, this), true);
  }

  public ArBaseLocalizationTask.LocalizationState getState() {
    return ArBaseLocalizationTask.LocalizationState.swigToEnum(ArnlJavaJNI.ArLocalizationTask_getState(swigCPtr, this));
  }

  public boolean getIdleFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getIdleFlag(swigCPtr, this);
  }

  public boolean getReloadingMapFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getReloadingMapFlag(swigCPtr, this);
  }

  public ArMapInterface readMapFromFile(String mapName) {
    long cPtr = ArnlJavaJNI.ArLocalizationTask_readMapFromFile(swigCPtr, this, mapName);
    return (cPtr == 0) ? null : new ArMapInterface(cPtr, false);
  }

  public ArMapInterface readAriaMap(ArMapInterface ariaMap) {
    long cPtr = ArnlJavaJNI.ArLocalizationTask_readAriaMap(swigCPtr, this, ArMapInterface.getCPtr(ariaMap), ariaMap);
    return (cPtr == 0) ? null : new ArMapInterface(cPtr, false);
  }

  public boolean loadParamFile(String file) {
    return ArnlJavaJNI.ArLocalizationTask_loadParamFile(swigCPtr, this, file);
  }

  public boolean saveParams(String filename) {
    return ArnlJavaJNI.ArLocalizationTask_saveParams(swigCPtr, this, filename);
  }

  public boolean fillHistogram(SWIGTYPE_p_double hist, SWIGTYPE_p_double cumSum, SWIGTYPE_p_int numSamples) {
    return ArnlJavaJNI.ArLocalizationTask_fillHistogram(swigCPtr, this, SWIGTYPE_p_double.getCPtr(hist), SWIGTYPE_p_double.getCPtr(cumSum), SWIGTYPE_p_int.getCPtr(numSamples));
  }

  public boolean scanToGlobalCoords(ArPose robPose, SWIGTYPE_p_std__vectorT_ArPose_t xyLrf) {
    return ArnlJavaJNI.ArLocalizationTask_scanToGlobalCoords(swigCPtr, this, ArPose.getCPtr(robPose), robPose, SWIGTYPE_p_std__vectorT_ArPose_t.getCPtr(xyLrf));
  }

  public ArTime getLastLocaTime() {
    return new ArTime(ArnlJavaJNI.ArLocalizationTask_getLastLocaTime(swigCPtr, this), true);
  }

  public boolean setLocaParams(double xStd, double yStd, double tStd, double kMmPerMm, double kDegPerDeg, double kDegPerMm, double sensorBelief) {
    return ArnlJavaJNI.ArLocalizationTask_setLocaParams(swigCPtr, this, xStd, yStd, tStd, kMmPerMm, kDegPerDeg, kDegPerMm, sensorBelief);
  }

  public void setIgnoreIllegalPoseFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setIgnoreIllegalPoseFlag(swigCPtr, this, f);
  }

  public void setAdjustNumSamplesFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setAdjustNumSamplesFlag(swigCPtr, this, f);
  }

  public void setMinNumSamples(int n) {
    ArnlJavaJNI.ArLocalizationTask_setMinNumSamples(swigCPtr, this, n);
  }

  public void setNumSamplesAngleFactor(double f) {
    ArnlJavaJNI.ArLocalizationTask_setNumSamplesAngleFactor(swigCPtr, this, f);
  }

  public void setLastLocaTimeToNow() {
    ArnlJavaJNI.ArLocalizationTask_setLastLocaTimeToNow(swigCPtr, this);
  }

  public void setSensorSetFlag(boolean p) {
    ArnlJavaJNI.ArLocalizationTask_setSensorSetFlag(swigCPtr, this, p);
  }

  public boolean computeLastLocaMeanVar(ArPose mean, SWIGTYPE_p_ArMatrix Var) {
    return ArnlJavaJNI.ArLocalizationTask_computeLastLocaMeanVar(swigCPtr, this, ArPose.getCPtr(mean), mean, SWIGTYPE_p_ArMatrix.getCPtr(Var));
  }

  public boolean findMCLMeanVar(ArPose mean, SWIGTYPE_p_ArMatrix Var) {
    return ArnlJavaJNI.ArLocalizationTask_findMCLMeanVar(swigCPtr, this, ArPose.getCPtr(mean), mean, SWIGTYPE_p_ArMatrix.getCPtr(Var));
  }

  public boolean findLocalizationMeanVar(ArPose mean, SWIGTYPE_p_ArMatrix Var) {
    return ArnlJavaJNI.ArLocalizationTask_findLocalizationMeanVar(swigCPtr, this, ArPose.getCPtr(mean), mean, SWIGTYPE_p_ArMatrix.getCPtr(Var));
  }

  public void setCorrectRobotFlag(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setCorrectRobotFlag(swigCPtr, this, f);
  }

  public void setRobotPose(ArPose pose, ArPose spread, int nSam) {
    ArnlJavaJNI.ArLocalizationTask_setRobotPose__SWIG_0(swigCPtr, this, ArPose.getCPtr(pose), pose, ArPose.getCPtr(spread), spread, nSam);
  }

  public void setRobotPose(ArPose pose, ArPose spread) {
    ArnlJavaJNI.ArLocalizationTask_setRobotPose__SWIG_1(swigCPtr, this, ArPose.getCPtr(pose), pose, ArPose.getCPtr(spread), spread);
  }

  public void setRobotPose(ArPose pose) {
    ArnlJavaJNI.ArLocalizationTask_setRobotPose__SWIG_2(swigCPtr, this, ArPose.getCPtr(pose), pose);
  }

  public boolean getRobotIsLostFlag() {
    return ArnlJavaJNI.ArLocalizationTask_getRobotIsLostFlag(swigCPtr, this);
  }

  public void setLocalizationIdle(boolean f) {
    ArnlJavaJNI.ArLocalizationTask_setLocalizationIdle(swigCPtr, this, f);
  }

  public void drawRangePoints(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawRangePoints(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void drawReflectorRays(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawReflectorRays(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void drawSamplePoses(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawSamplePoses(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void drawSampleBounds(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawSampleBounds(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void drawKalmanVariance(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawKalmanVariance(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void drawMCLVariance(ArServerClient client, ArNetPacket packet) {
    ArnlJavaJNI.ArLocalizationTask_drawMCLVariance(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void setMultiRobotCallback(SWIGTYPE_p_ArRetFunctorT_std__listT_ArMultiRobotPoseAndRadius_t_t func) {
    ArnlJavaJNI.ArLocalizationTask_setMultiRobotCallback(swigCPtr, this, SWIGTYPE_p_ArRetFunctorT_std__listT_ArMultiRobotPoseAndRadius_t_t.getCPtr(func));
  }

  public void setInitializedFlag(boolean a) {
    ArnlJavaJNI.ArLocalizationTask_setInitializedFlag(swigCPtr, this, a);
  }

}
