/*
Adept MobileRobots Advanced Robotics Navigation and Localization (ARNL)
Version 1.9.0

Copyright (C) 2004, 2005 ActivMedia Robotics LLC
Copyright (C) 2006-2009 MobileRobots Inc.
Copyright (C) 2010-2014 Adept Technology, Inc.

All Rights Reserved.

Adept MobileRobots does not make any representations about the
suitability of this software for any purpose.  It is provided "as is"
without express or implied warranty.

The license for this software is distributed as LICENSE.txt in the top
level directory.

robots@mobilerobots.com
Adept MobileRobots
10 Columbia Drive
Amherst, NH 03031
+1-603-881-7960

*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Arnl;

  import com.mobilerobots.Aria.*;
  import com.mobilerobots.ArNetworking.*;
  import com.mobilerobots.BaseArnl.*;

public class ArDockInterface {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArDockInterface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArDockInterface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArnlJavaJNI.delete_ArDockInterface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static String toString(ArDockInterface.State s) {
    return ArnlJavaJNI.ArDockInterface_toString(s.swigValue());
  }

  public ArDockInterface.State getState() {
    return ArDockInterface.State.swigToEnum(ArnlJavaJNI.ArDockInterface_getState(swigCPtr, this));
  }

  public boolean getForcedDock() {
    return ArnlJavaJNI.ArDockInterface_getForcedDock(swigCPtr, this);
  }

  public boolean isForcedDockAvailable() {
    return ArnlJavaJNI.ArDockInterface_isForcedDockAvailable(swigCPtr, this);
  }

  public boolean getAutoDock() {
    return ArnlJavaJNI.ArDockInterface_getAutoDock(swigCPtr, this);
  }

  public boolean isAutoDockAvailable() {
    return ArnlJavaJNI.ArDockInterface_isAutoDockAvailable(swigCPtr, this);
  }

  public boolean hasGoToDockBeenSent() {
    return ArnlJavaJNI.ArDockInterface_hasGoToDockBeenSent(swigCPtr, this);
  }

  public void gotoDock(boolean force) {
    ArnlJavaJNI.ArDockInterface_gotoDock__SWIG_0(swigCPtr, this, force);
  }

  public void gotoDock() {
    ArnlJavaJNI.ArDockInterface_gotoDock__SWIG_1(swigCPtr, this);
  }

  public final static class State {
    public final static State UNDOCKED = new State("UNDOCKED");
    public final static State DOCKING = new State("DOCKING");
    public final static State DOCKED = new State("DOCKED");
    public final static State UNDOCKING = new State("UNDOCKING");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static State swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + State.class + " with value " + swigValue);
    }

    private State(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private State(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private State(String swigName, State swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static State[] swigValues = { UNDOCKED, DOCKING, DOCKED, UNDOCKING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
