/*
Adept MobileRobots Advanced Robotics Navigation and Localization (ARNL)
Version 1.9.0

Copyright (C) 2004, 2005 ActivMedia Robotics LLC
Copyright (C) 2006-2009 MobileRobots Inc.
Copyright (C) 2010-2014 Adept Technology, Inc.

All Rights Reserved.

Adept MobileRobots does not make any representations about the
suitability of this software for any purpose.  It is provided "as is"
without express or implied warranty.

The license for this software is distributed as LICENSE.txt in the top
level directory.

robots@mobilerobots.com
Adept MobileRobots
10 Columbia Drive
Amherst, NH 03031
+1-603-881-7960

*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Arnl;

  import com.mobilerobots.Aria.*; 
  import com.mobilerobots.ArNetworking.*;
  import com.mobilerobots.BaseArnl.*;

class ArnlJavaJNI {
  public final static native int ARNL_get();
  public final static native int SWIG_IMPORTED_ARIA_get();
  public final static native int SWIG_IMPORTED_ARNETWORKING_get();
  public final static native int SWIG_IMPORTED_ARNL_BASE_get();
  public final static native long new_ArLocalizationTask__SWIG_0(long jarg1, ArRobot jarg1_, long jarg2, ArRangeDevice jarg2_, String jarg3);
  public final static native long new_ArLocalizationTask__SWIG_1(long jarg1, ArRobot jarg1_, long jarg2, ArRangeDevice jarg2_, long jarg3, ArMapInterface jarg3_, boolean jarg4);
  public final static native long new_ArLocalizationTask__SWIG_2(long jarg1, ArRobot jarg1_, long jarg2, ArRangeDevice jarg2_, long jarg3, ArMapInterface jarg3_);
  public final static native void delete_ArLocalizationTask(long jarg1);
  public final static native boolean ArLocalizationTask_localizeRobotInMapInit__SWIG_0(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, int jarg3, double jarg4, double jarg5, double jarg6, double jarg7, boolean jarg8, boolean jarg9, boolean jarg10);
  public final static native boolean ArLocalizationTask_localizeRobotInMapInit__SWIG_1(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, int jarg3, double jarg4, double jarg5, double jarg6, double jarg7, boolean jarg8, boolean jarg9);
  public final static native boolean ArLocalizationTask_localizeRobotInMapInit__SWIG_2(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, int jarg3, double jarg4, double jarg5, double jarg6, double jarg7, boolean jarg8);
  public final static native boolean ArLocalizationTask_localizeRobotInMapInit__SWIG_3(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, int jarg3, double jarg4, double jarg5, double jarg6, double jarg7);
  public final static native boolean ArLocalizationTask_localizeRobotInMapMoved(long jarg1, ArLocalizationTask jarg1_, int jarg2, double jarg3, double jarg4, double jarg5);
  public final static native boolean ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_0(long jarg1, ArLocalizationTask jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native boolean ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_1(long jarg1, ArLocalizationTask jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native boolean ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_2(long jarg1, ArLocalizationTask jarg1_, double jarg2, double jarg3);
  public final static native boolean ArLocalizationTask_localizeRobotAtHomeBlocking__SWIG_3(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_localizeRobotAtHomeNonBlocking(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getRobotHome(long jarg1, ArLocalizationTask jarg1_);
  public final static native void ArLocalizationTask_setForceUpdateParams(long jarg1, ArLocalizationTask jarg1_, int jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void ArLocalizationTask_forceUpdatePose__SWIG_0(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, boolean jarg3);
  public final static native void ArLocalizationTask_forceUpdatePose__SWIG_1(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_);
  public final static native void ArLocalizationTask_addFailedLocalizationCB(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArLocalizationTask_remFailedLocalizationCB(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native boolean ArLocalizationTask_setGridResolution(long jarg1, ArLocalizationTask jarg1_, double jarg2, long jarg3, ArMapInterface jarg3_);
  public final static native void ArLocalizationTask_setFailedCallBack(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArLocalizationTask_setTriggerDelR(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setTriggerDelT(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setTriggerTimeFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setTriggerTime(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setTriggerTimeX(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setTriggerTimeY(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setTriggerTimeTh(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setNumSamples(long jarg1, ArLocalizationTask jarg1_, int jarg2);
  public final static native void ArLocalizationTask_setNumSamplesAtInit(long jarg1, ArLocalizationTask jarg1_, int jarg2);
  public final static native void ArLocalizationTask_setRayTraceAtInit(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setCurrentNumSamples(long jarg1, ArLocalizationTask jarg1_, int jarg2);
  public final static native void ArLocalizationTask_setPassThreshold(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setLostThreshold(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setSensorBelief(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setCurrentLocaPose__SWIG_0(long jarg1, ArLocalizationTask jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ArLocalizationTask_setCurrentLocaPose__SWIG_1(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_);
  public final static native void ArLocalizationTask_setVerboseFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setAngleIncrement(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setKillThreshold(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setRecoverOnFailedFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setIdleFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setReloadingMapFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setEnableReflectorLocalizationFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setReflectorVar(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectorMatchDist(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectorMatchAngle(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectorMaxRange(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectorMaxAngle(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectorSize(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setReflectanceThreshold(long jarg1, ArLocalizationTask jarg1_, int jarg2);
  public final static native void ArLocalizationTask_setBypassMCLFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_getForceUpdateParams(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean ArLocalizationTask_getVerboseFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getInitializedFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getNumSamples(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getNumSamplesAtInit(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getRayTraceAtInit(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getCurrentNumSamples(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getRobotMaxProbPose(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerDelR(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerDelT(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getTriggerTimeFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerTime(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerTimeX(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerTimeY(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getTriggerTimeTh(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPassThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getLostThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getUsingPassThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native void ArLocalizationTask_setTempPassThreshold(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native double ArLocalizationTask_getTempPassThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native void ArLocalizationTask_clearTempPassThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getLocalizationScore(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getLocalizationThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getMCLocalizationScore(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getRefLocalizationScore(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getSensorBelief__SWIG_0(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getCurrentLocaPose(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getStdX(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getStdY(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getStdTh(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getErrorMmPerMm(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getErrorDegPerDeg(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getErrorDegPerMm(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeakFactor(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getOccThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getGridRes(long jarg1, ArLocalizationTask jarg1_);
  public final static native String ArLocalizationTask_getMapName(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeturbRangeX(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeturbRangeY(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeturbRangeTh(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getFailedRangeX(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getFailedRangeY(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getFailedRangeTh(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeakStdX(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeakStdY(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getPeakStdTh(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getAngleIncrement(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getKillThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getAriaMap(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getBufferSize(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getXYBuffer(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getBufferPose(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getOccGridPtr(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getCurrentSamplePoses(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getRecoverOnFailedFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getIgnoreIllegalPoseFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getAdjustNumSamplesFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getMinNumSamples(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getNumSamplesAngleFactor(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getSensorSetFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getEnableReflectorLocalizationFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorVar(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorMatchDist(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorMatchAngle(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorMaxRange(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorMaxAngle(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorSize(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getReflectanceThreshold(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getBypassMCLFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorTriDistLimit(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorTriAngLimit(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getBadReflectorFactor(long jarg1, ArLocalizationTask jarg1_);
  public final static native double ArLocalizationTask_getReflectorRangeFactor(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_getQParams(long jarg1, ArLocalizationTask jarg1_);
  public final static native int ArLocalizationTask_getState(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getIdleFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_getReloadingMapFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native long ArLocalizationTask_readMapFromFile(long jarg1, ArLocalizationTask jarg1_, String jarg2);
  public final static native long ArLocalizationTask_readAriaMap(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArMapInterface jarg2_);
  public final static native boolean ArLocalizationTask_loadParamFile(long jarg1, ArLocalizationTask jarg1_, String jarg2);
  public final static native boolean ArLocalizationTask_saveParams(long jarg1, ArLocalizationTask jarg1_, String jarg2);
  public final static native boolean ArLocalizationTask_fillHistogram(long jarg1, ArLocalizationTask jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ArLocalizationTask_scanToGlobalCoords(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3);
  public final static native long ArLocalizationTask_getLastLocaTime(long jarg1, ArLocalizationTask jarg1_);
  public final static native boolean ArLocalizationTask_setLocaParams(long jarg1, ArLocalizationTask jarg1_, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7, double jarg8);
  public final static native void ArLocalizationTask_setIgnoreIllegalPoseFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setAdjustNumSamplesFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setMinNumSamples(long jarg1, ArLocalizationTask jarg1_, int jarg2);
  public final static native void ArLocalizationTask_setNumSamplesAngleFactor(long jarg1, ArLocalizationTask jarg1_, double jarg2);
  public final static native void ArLocalizationTask_setLastLocaTimeToNow(long jarg1, ArLocalizationTask jarg1_);
  public final static native void ArLocalizationTask_setSensorSetFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native boolean ArLocalizationTask_computeLastLocaMeanVar(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3);
  public final static native boolean ArLocalizationTask_findMCLMeanVar(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3);
  public final static native boolean ArLocalizationTask_findLocalizationMeanVar(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3);
  public final static native void ArLocalizationTask_setCorrectRobotFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_setRobotPose__SWIG_0(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3, ArPose jarg3_, int jarg4);
  public final static native void ArLocalizationTask_setRobotPose__SWIG_1(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_, long jarg3, ArPose jarg3_);
  public final static native void ArLocalizationTask_setRobotPose__SWIG_2(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArPose jarg2_);
  public final static native boolean ArLocalizationTask_getRobotIsLostFlag(long jarg1, ArLocalizationTask jarg1_);
  public final static native void ArLocalizationTask_setLocalizationIdle(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native void ArLocalizationTask_drawRangePoints(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_drawReflectorRays(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_drawSamplePoses(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_drawSampleBounds(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_drawKalmanVariance(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_drawMCLVariance(long jarg1, ArLocalizationTask jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArLocalizationTask_setMultiRobotCallback(long jarg1, ArLocalizationTask jarg1_, long jarg2);
  public final static native void ArLocalizationTask_setInitializedFlag(long jarg1, ArLocalizationTask jarg1_, boolean jarg2);
  public final static native String ArDockInterface_toString(int jarg1);
  public final static native void delete_ArDockInterface(long jarg1);
  public final static native int ArDockInterface_getState(long jarg1, ArDockInterface jarg1_);
  public final static native boolean ArDockInterface_getForcedDock(long jarg1, ArDockInterface jarg1_);
  public final static native boolean ArDockInterface_isForcedDockAvailable(long jarg1, ArDockInterface jarg1_);
  public final static native boolean ArDockInterface_getAutoDock(long jarg1, ArDockInterface jarg1_);
  public final static native boolean ArDockInterface_isAutoDockAvailable(long jarg1, ArDockInterface jarg1_);
  public final static native boolean ArDockInterface_hasGoToDockBeenSent(long jarg1, ArDockInterface jarg1_);
  public final static native void ArDockInterface_gotoDock__SWIG_0(long jarg1, ArDockInterface jarg1_, boolean jarg2);
  public final static native void ArDockInterface_gotoDock__SWIG_1(long jarg1, ArDockInterface jarg1_);
  public final static native void delete_ArServerModeDock(long jarg1);
  public final static native long ArServerModeDock_createDock__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLocalizationTask jarg3_, long jarg4, ArPathPlanningInterface jarg4_, long jarg5, ArFunctor jarg5_);
  public final static native long ArServerModeDock_createDock__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLocalizationTask jarg3_, long jarg4, ArPathPlanningInterface jarg4_);
  public final static native int ArServerModeDock_getState(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_dock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_undock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_checkDock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_activateAsDocked(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_checkDefault(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_activate(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_deactivate(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_requestUnlock(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_getForcedDock(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_isForcedDockAvailable(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_isAutoDockAvailable(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_hasGoToDockBeenSent(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_gotoDock(long jarg1, ArServerModeDock jarg1_, boolean jarg2);
  public final static native void ArServerModeDock_requestForcedDock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_forceUnlock(long jarg1, ArServerModeDock jarg1_);
  public final static native String ArServerModeDock_getDockName(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDockingVoltage(long jarg1, ArServerModeDock jarg1_, double jarg2);
  public final static native double ArServerModeDock_getDockingVoltage(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDoneChargingVoltage(long jarg1, ArServerModeDock jarg1_, double jarg2);
  public final static native double ArServerModeDock_getDoneChargingVoltage(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDoneChargingMinutes(long jarg1, ArServerModeDock jarg1_, int jarg2);
  public final static native int ArServerModeDock_getDoneChargingMinutes(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_getUseChargeState(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDoneChargingAtFloat(long jarg1, ArServerModeDock jarg1_, boolean jarg2);
  public final static native boolean ArServerModeDock_getDoneChargingAtFloat(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setMinimumMinutesBetweenAutoDock(long jarg1, ArServerModeDock jarg1_, int jarg2);
  public final static native int ArServerModeDock_getMinimumMinutesBetweenAutoDock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setAutoDock(long jarg1, ArServerModeDock jarg1_, boolean jarg2);
  public final static native boolean ArServerModeDock_getAutoDock(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_addToConfig(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void ArServerModeDock_addControlCommands(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerHandlerCommands jarg2_);
  public final static native void ArServerModeDock_addInfoCommands(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerHandlerCommands jarg2_, long jarg3);
  public final static native void ArServerModeDock_setGetOverrideMapNameFunctor(long jarg1, ArServerModeDock jarg1_, long jarg2);
  public final static native void ArServerModeDock_serverDock(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverUndock(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverDockInfo(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverGetAutoDock(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverSetAutoDock(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverDockingAtToServer(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_serverDockingAtFromServer(long jarg1, ArServerModeDock jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDock_addStateChangedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addStateChangedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remStateChangedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long ArServerModeDock_getFailedGotoNum(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_addForcedDockCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addForcedDockCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remForcedDockCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addIdleDockCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addIdleDockCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remIdleDockCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addRequestedDockCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addRequestedDockCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remRequestedDockCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addDrivingToDockCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addDrivingToDockCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remDrivingToDockCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addDrivingIntoDockCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addDrivingIntoDockCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remDrivingIntoDockCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addDockedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addDockedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remDockedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addSingleShotDockedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addSingleShotDockedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remSingleShotDockedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addDockNowUnforcedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addDockNowUnforcedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remDockNowUnforcedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addDockNowForcedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addDockNowForcedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remDockNowForcedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addUndockingCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addUndockingCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remUndockingCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addUndockedCB__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addUndockedCB__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remUndockedCB(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_setDockInfoLogLevel(long jarg1, ArServerModeDock jarg1_, int jarg2);
  public final static native void ArServerModeDock_setDockModeLogLevel(long jarg1, ArServerModeDock jarg1_, int jarg2);
  public final static native boolean ArServerModeDock_subclassDoneCharging(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_subclassNotDoneCharging(long jarg1, ArServerModeDock jarg1_);
  public final static native boolean ArServerModeDock_subclassNeedsAutoDock(long jarg1, ArServerModeDock jarg1_, String jarg2, long jarg3);
  public final static native boolean ArServerModeDock_subclassAddParamsDoneCharging(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeDock_subclassGetDockInfoString(long jarg1, ArServerModeDock jarg1_, String jarg2, long jarg3, boolean jarg4);
  public final static native void ArServerModeDock_baseAddParamsDoneCharging(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeDock_baseAddParamDockUntilDoneCharging(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeDock_baseAddParamMinutesToChargeFor(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeDock_baseAddParamToChargeTo(long jarg1, ArServerModeDock jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native String ArServerModeDock_getDockFileName(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDockFileName(long jarg1, ArServerModeDock jarg1_, String jarg2);
  public final static native String ArServerModeDock_getDockBaseDirectory(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_setDockBaseDirectory(long jarg1, ArServerModeDock jarg1_, String jarg2);
  public final static native void ArServerModeDock_restoreFromDockFile(long jarg1, ArServerModeDock jarg1_);
  public final static native void ArServerModeDock_addPreWriteCallback__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addPreWriteCallback__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remPreWriteCallback(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_addPostWriteCallback__SWIG_0(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeDock_addPostWriteCallback__SWIG_1(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_remPostPostWriteCallback(long jarg1, ArServerModeDock jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeDock_setDistanceCB(long jarg1, ArServerModeDock jarg1_, long jarg2);
  public final static native void delete_ArServerModeDockPioneer(long jarg1);
  public final static native void ArServerModeDockPioneer_dock(long jarg1, ArServerModeDockPioneer jarg1_);
  public final static native void ArServerModeDockPioneer_undock(long jarg1, ArServerModeDockPioneer jarg1_);
  public final static native void ArServerModeDockPioneer_checkDock(long jarg1, ArServerModeDockPioneer jarg1_);
  public final static native void ArServerModeDockPioneer_forceUnlock(long jarg1, ArServerModeDockPioneer jarg1_);
  public final static native void ArServerModeDockPioneer_deactivate(long jarg1, ArServerModeDockPioneer jarg1_);
  public final static native void delete_ArServerModeDockTriangleBump(long jarg1);
  public final static native void ArServerModeDockTriangleBump_dock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_undock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_checkDock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_forceUnlock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_deactivate(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native boolean ArServerModeDockTriangleBump_isDocked(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_enableDock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_disableDock(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_beforeDriveInCallback(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_afterDriveOutCallback(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_backoutCallback(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_setStallsAsBumps(long jarg1, ArServerModeDockTriangleBump jarg1_, boolean jarg2);
  public final static native boolean ArServerModeDockTriangleBump_getStallsAsBumps(long jarg1, ArServerModeDockTriangleBump jarg1_);
  public final static native void ArServerModeDockTriangleBump_addToConfig(long jarg1, ArServerModeDockTriangleBump jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void delete_ArServerModeDockPatrolBot(long jarg1);
  public final static native boolean ArServerModeDockPatrolBot_isDocked(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void ArServerModeDockPatrolBot_enableDock(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void ArServerModeDockPatrolBot_disableDock(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void ArServerModeDockPatrolBot_checkDock(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void ArServerModeDockPatrolBot_beforeDriveInCallback(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void ArServerModeDockPatrolBot_afterDriveOutCallback(long jarg1, ArServerModeDockPatrolBot jarg1_);
  public final static native void delete_ArServerModeDockPatrolBotNiMH(long jarg1);
  public final static native boolean ArServerModeDockPatrolBotNiMH_isDocked(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_);
  public final static native boolean ArServerModeDockPatrolBotNiMH_subclassAddParamsDoneCharging(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native boolean ArServerModeDockPatrolBotNiMH_subclassDoneCharging(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_);
  public final static native boolean ArServerModeDockPatrolBotNiMH_subclassNotDoneCharging(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_);
  public final static native boolean ArServerModeDockPatrolBotNiMH_subclassNeedsAutoDock(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_, String jarg2, long jarg3);
  public final static native void ArServerModeDockPatrolBotNiMH_subclassGetDockInfoString(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_, String jarg2, long jarg3, boolean jarg4);
  public final static native void ArServerModeDockPatrolBotNiMH_setAutoDock(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_, boolean jarg2);
  public final static native void ArServerModeDockPatrolBotNiMH_setNeedBalance(long jarg1, ArServerModeDockPatrolBotNiMH jarg1_, boolean jarg2);
  public final static native void delete_ArServerModeDockSimulator(long jarg1);
  public final static native boolean ArServerModeDockSimulator_isDocked(long jarg1, ArServerModeDockSimulator jarg1_);
  public final static native void ArServerModeDockSimulator_enableDock(long jarg1, ArServerModeDockSimulator jarg1_);
  public final static native void ArServerModeDockSimulator_disableDock(long jarg1, ArServerModeDockSimulator jarg1_);
  public final static native void ArServerModeDockSimulator_checkDock(long jarg1, ArServerModeDockSimulator jarg1_);
  public final static native void delete_ArServerModeDockPowerBot(long jarg1);
  public final static native boolean ArServerModeDockPowerBot_isDocked(long jarg1, ArServerModeDockPowerBot jarg1_);
  public final static native void ArServerModeDockPowerBot_enableDock(long jarg1, ArServerModeDockPowerBot jarg1_);
  public final static native void ArServerModeDockPowerBot_disableDock(long jarg1, ArServerModeDockPowerBot jarg1_);
  public final static native void ArServerModeDockPowerBot_backoutCallback(long jarg1, ArServerModeDockPowerBot jarg1_);
  public final static native void ArServerModeDockPowerBot_addToConfig(long jarg1, ArServerModeDockPowerBot jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void delete_ArServerModeDockTriangleBumpBackwards(long jarg1);
  public final static native void ArServerModeDockTriangleBumpBackwards_dock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_undock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_checkDock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_forceUnlock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_deactivate(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native boolean ArServerModeDockTriangleBumpBackwards_isDocked(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_enableDock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_disableDock(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_beforeDriveInCallback(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_afterDriveOutCallback(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_pulloutCallback(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_setStallsAsBumps(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_, boolean jarg2);
  public final static native boolean ArServerModeDockTriangleBumpBackwards_getStallsAsBumps(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_);
  public final static native void ArServerModeDockTriangleBumpBackwards_addToConfig(long jarg1, ArServerModeDockTriangleBumpBackwards jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void delete_ArServerModeDockLynx(long jarg1);
  public final static native void ArServerModeDockLynx_restoreFromDockFile(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native boolean ArServerModeDockLynx_isDocked(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native void ArServerModeDockLynx_enableDock(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native void ArServerModeDockLynx_disableDock(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native void ArServerModeDockLynx_checkDock(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native void ArServerModeDockLynx_beforeDriveInCallback(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native void ArServerModeDockLynx_afterDriveOutCallback(long jarg1, ArServerModeDockLynx jarg1_);
  public final static native long SWIGArLocalizationTaskUpcast(long jarg1);
  public final static native long SWIGArServerModeDockUpcast(long jarg1);
  public final static native long SWIGArServerModeDockPioneerUpcast(long jarg1);
  public final static native long SWIGArServerModeDockTriangleBumpUpcast(long jarg1);
  public final static native long SWIGArServerModeDockPatrolBotUpcast(long jarg1);
  public final static native long SWIGArServerModeDockPatrolBotNiMHUpcast(long jarg1);
  public final static native long SWIGArServerModeDockSimulatorUpcast(long jarg1);
  public final static native long SWIGArServerModeDockPowerBotUpcast(long jarg1);
  public final static native long SWIGArServerModeDockTriangleBumpBackwardsUpcast(long jarg1);
  public final static native long SWIGArServerModeDockLynxUpcast(long jarg1);
}
