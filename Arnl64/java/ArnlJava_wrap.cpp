/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */



#define ARNL 1
#include "Aria.h"
#include "ArNetworking.h"
#include "Arnl.h"
#include "ArLocalizationTask.h"
#include "ArDockInterface.h"
#include "ArDocking.h"
#include "wrapper_ExtraClasses.h"


#include <stdexcept>


#include <list>
#include <stdexcept>
#include <cstddef>


#include <vector>
#include <stdexcept>


#include <list>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ArnlJava_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ARNL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIG_1IMPORTED_1ARIA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIG_1IMPORTED_1ARNETWORKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIG_1IMPORTED_1ARNL_1BASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_new_1ArLocalizationTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  char *arg3 = (char *) 0 ;
  ArLocalizationTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArLocalizationTask *)new ArLocalizationTask(arg1,arg2,arg3);
  *(ArLocalizationTask **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_new_1ArLocalizationTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  ArMapInterface *arg3 = (ArMapInterface *) 0 ;
  bool arg4 ;
  ArLocalizationTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  arg3 = *(ArMapInterface **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArLocalizationTask *)new ArLocalizationTask(arg1,arg2,arg3,arg4);
  *(ArLocalizationTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_new_1ArLocalizationTask_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  ArMapInterface *arg3 = (ArMapInterface *) 0 ;
  ArLocalizationTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  arg3 = *(ArMapInterface **)&jarg3; 
  result = (ArLocalizationTask *)new ArLocalizationTask(arg1,arg2,arg3);
  *(ArLocalizationTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArLocalizationTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotInMapInit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  result = (bool)(arg1)->localizeRobotInMapInit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotInMapInit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jboolean jarg8, jboolean jarg9) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  bool arg9 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (bool)(arg1)->localizeRobotInMapInit(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotInMapInit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jboolean jarg8) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  bool arg8 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->localizeRobotInMapInit(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotInMapInit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (bool)(arg1)->localizeRobotInMapInit(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotInMapMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->localizeRobotInMapMoved(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotAtHomeBlocking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->localizeRobotAtHomeBlocking(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotAtHomeBlocking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->localizeRobotAtHomeBlocking(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotAtHomeBlocking_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->localizeRobotAtHomeBlocking(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotAtHomeBlocking_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->localizeRobotAtHomeBlocking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1localizeRobotAtHomeNonBlocking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->localizeRobotAtHomeNonBlocking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRobotHome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getRobotHome();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setForceUpdateParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setForceUpdateParams(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1forceUpdatePose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->forceUpdatePose(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1forceUpdatePose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->forceUpdatePose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1addFailedLocalizationCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->addFailedLocalizationCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1remFailedLocalizationCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->remFailedLocalizationCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setGridResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  ArMapInterface *arg3 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(ArMapInterface **)&jarg3; 
  result = (bool)(arg1)->setGridResolution(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setFailedCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->setFailedCallBack(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerDelR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerDelR(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerDelT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerDelT(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerTimeFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTriggerTimeFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerTimeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerTimeX(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerTimeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerTimeY(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTriggerTimeTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriggerTimeTh(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumSamples(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setNumSamplesAtInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumSamplesAtInit(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setRayTraceAtInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRayTraceAtInit(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setCurrentNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCurrentNumSamples(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPassThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setLostThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLostThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setSensorBelief(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSensorBelief(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setCurrentLocaPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setCurrentLocaPose(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setCurrentLocaPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setCurrentLocaPose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setVerboseFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVerboseFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setAngleIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAngleIncrement(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setKillThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setKillThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setRecoverOnFailedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRecoverOnFailedFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setIdleFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReloadingMapFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReloadingMapFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setEnableReflectorLocalizationFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnableReflectorLocalizationFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorVar(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorMatchDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorMatchDist(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorMatchAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorMatchAngle(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorMaxRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorMaxAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorMaxAngle(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectorSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setReflectorSize(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setReflectanceThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setReflectanceThreshold(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setBypassMCLFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBypassMCLFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getForceUpdateParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose *arg2 = 0 ;
  int *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg6 = *(double **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->getForceUpdateParams(*arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getVerboseFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getVerboseFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getInitializedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getInitializedFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getNumSamples();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getNumSamplesAtInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getNumSamplesAtInit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRayTraceAtInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getRayTraceAtInit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getCurrentNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getCurrentNumSamples();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRobotMaxProbPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getRobotMaxProbPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerDelR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerDelR();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerDelT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerDelT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerTimeFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getTriggerTimeFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerTimeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerTimeX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerTimeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerTimeY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTriggerTimeTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTriggerTimeTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getPassThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getLostThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getLostThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getUsingPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getUsingPassThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setTempPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTempPassThreshold(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getTempPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getTempPassThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1clearTempPassThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  (arg1)->clearTempPassThreshold();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getLocalizationScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getLocalizationScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getLocalizationThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getLocalizationThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getMCLocalizationScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getMCLocalizationScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRefLocalizationScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getRefLocalizationScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getSensorBelief_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getSensorBelief();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getCurrentLocaPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getCurrentLocaPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getStdX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getStdX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getStdY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getStdY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getStdTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getStdTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getErrorMmPerMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getErrorMmPerMm();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getErrorDegPerDeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getErrorDegPerDeg();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getErrorDegPerMm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getErrorDegPerMm();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeakFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeakFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getOccThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getOccThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getGridRes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getGridRes();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getMapName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (char *)(arg1)->getMapName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeturbRangeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeturbRangeX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeturbRangeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeturbRangeY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeturbRangeTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeturbRangeTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getFailedRangeX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getFailedRangeX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getFailedRangeY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getFailedRangeY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getFailedRangeTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getFailedRangeTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeakStdX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeakStdX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeakStdY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeakStdY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getPeakStdTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getPeakStdTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getAngleIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getAngleIncrement();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getKillThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)((ArLocalizationTask const *)arg1)->getKillThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getAriaMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (ArMapInterface *)(arg1)->getAriaMap();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getBufferSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getXYBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  SwigValueWrapper< std::vector< ArPose > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getXYBuffer();
  *(std::vector< ArPose > **)&jresult = new std::vector< ArPose >((const std::vector< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getBufferPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getBufferPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getOccGridPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArOccGrid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (ArOccGrid *)(arg1)->getOccGridPtr();
  *(ArOccGrid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getCurrentSamplePoses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  std::list< ArPose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getCurrentSamplePoses();
  *(std::list< ArPose > **)&jresult = new std::list< ArPose >((const std::list< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRecoverOnFailedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getRecoverOnFailedFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getIgnoreIllegalPoseFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getIgnoreIllegalPoseFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getAdjustNumSamplesFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getAdjustNumSamplesFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getMinNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getMinNumSamples();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getNumSamplesAngleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getNumSamplesAngleFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getSensorSetFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getSensorSetFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getEnableReflectorLocalizationFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getEnableReflectorLocalizationFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorVar();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorMatchDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorMatchDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorMatchAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorMatchAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorMaxRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorMaxAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorMaxAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorSize();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectanceThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (int)(arg1)->getReflectanceThreshold();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getBypassMCLFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getBypassMCLFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorTriDistLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorTriDistLimit();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorTriAngLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorTriAngLimit();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getBadReflectorFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getBadReflectorFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReflectorRangeFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (double)(arg1)->getReflectorRangeFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getQParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getQParams();
  *(ArMatrix **)&jresult = new ArMatrix((const ArMatrix &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArBaseLocalizationTask::LocalizationState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (ArBaseLocalizationTask::LocalizationState)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getIdleFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getIdleFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getReloadingMapFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getReloadingMapFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1readMapFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapInterface *)(arg1)->readMapFromFile(arg2);
  *(ArMapInterface **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1readAriaMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (ArMapInterface *)(arg1)->readAriaMap(arg2);
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1loadParamFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadParamFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1saveParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->saveParams(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1fillHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double **arg2 = 0 ;
  double **arg3 = 0 ;
  int *arg4 = 0 ;
  double *temp2 = 0 ;
  double *temp3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->fillHistogram(*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1scanToGlobalCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  std::vector< ArPose > *arg3 = 0 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::vector< ArPose > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ArPose > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scanToGlobalCoords(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getLastLocaTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (arg1)->getLastLocaTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setLocaParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  result = (bool)(arg1)->setLocaParams(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setIgnoreIllegalPoseFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreIllegalPoseFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setAdjustNumSamplesFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdjustNumSamplesFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setMinNumSamples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMinNumSamples(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setNumSamplesAngleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setNumSamplesAngleFactor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setLastLocaTimeToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  (arg1)->setLastLocaTimeToNow();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setSensorSetFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSensorSetFlag(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1computeLastLocaMeanVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose *arg2 = 0 ;
  ArMatrix *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose & reference is null");
    return 0;
  } 
  arg3 = *(ArMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMatrix & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeLastLocaMeanVar(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1findMCLMeanVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose *arg2 = 0 ;
  ArMatrix *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose & reference is null");
    return 0;
  } 
  arg3 = *(ArMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMatrix & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->findMCLMeanVar(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1findLocalizationMeanVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose *arg2 = 0 ;
  ArMatrix *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose & reference is null");
    return 0;
  } 
  arg3 = *(ArMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMatrix & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->findLocalizationMeanVar(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setCorrectRobotFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCorrectRobotFlag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setRobotPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  int arg4 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  (arg1)->setRobotPose(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setRobotPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setRobotPose(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setRobotPose_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setRobotPose(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1getRobotIsLostFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  result = (bool)(arg1)->getRobotIsLostFlag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setLocalizationIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLocalizationIdle(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawRangePoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawRangePoints(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawReflectorRays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawReflectorRays(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawSamplePoses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawSamplePoses(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawSampleBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawSampleBounds(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawKalmanVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawKalmanVariance(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1drawMCLVariance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->drawMCLVariance(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setMultiRobotCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  ArRetFunctor< std::list< ArMultiRobotPoseAndRadius > > *arg2 = (ArRetFunctor< std::list< ArMultiRobotPoseAndRadius > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = *(ArRetFunctor< std::list< ArMultiRobotPoseAndRadius > > **)&jarg2; 
  (arg1)->setMultiRobotCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArLocalizationTask_1setInitializedFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLocalizationTask *arg1 = (ArLocalizationTask *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLocalizationTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInitializedFlag(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArDockInterface::State arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArDockInterface::State)jarg1; 
  result = (char *)ArDockInterface::toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArDockInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDockInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  ArDockInterface::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (ArDockInterface::State)((ArDockInterface const *)arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1getForcedDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (bool)(arg1)->getForcedDock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1isForcedDockAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (bool)(arg1)->isForcedDockAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1getAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (bool)(arg1)->getAutoDock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1isAutoDockAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (bool)(arg1)->isAutoDockAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1hasGoToDockBeenSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  result = (bool)(arg1)->hasGoToDockBeenSent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1gotoDock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->gotoDock(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArDockInterface_1gotoDock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArDockInterface *arg1 = (ArDockInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDockInterface **)&jarg1; 
  (arg1)->gotoDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1createDock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLocalizationTask *arg3 = (ArLocalizationTask *) 0 ;
  ArPathPlanningInterface *arg4 = (ArPathPlanningInterface *) 0 ;
  ArFunctor *arg5 = (ArFunctor *) 0 ;
  ArServerModeDock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLocalizationTask **)&jarg3; 
  arg4 = *(ArPathPlanningInterface **)&jarg4; 
  arg5 = *(ArFunctor **)&jarg5; 
  result = (ArServerModeDock *)ArServerModeDock::createDock(arg1,arg2,arg3,arg4,arg5);
  *(ArServerModeDock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1createDock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLocalizationTask *arg3 = (ArLocalizationTask *) 0 ;
  ArPathPlanningInterface *arg4 = (ArPathPlanningInterface *) 0 ;
  ArServerModeDock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLocalizationTask **)&jarg3; 
  arg4 = *(ArPathPlanningInterface **)&jarg4; 
  result = (ArServerModeDock *)ArServerModeDock::createDock(arg1,arg2,arg3,arg4);
  *(ArServerModeDock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArDockInterface::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (ArDockInterface::State)((ArServerModeDock const *)arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1dock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->dock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1undock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->undock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1activateAsDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->activateAsDocked();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1checkDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->checkDefault();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1requestUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->requestUnlock();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getForcedDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->getForcedDock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1isForcedDockAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->isForcedDockAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1isAutoDockAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->isAutoDockAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1hasGoToDockBeenSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->hasGoToDockBeenSent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1gotoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->gotoDock(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1requestForcedDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->requestForcedDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1forceUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->forceUnlock();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDockName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (char *)(arg1)->getDockName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDockingVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDockingVoltage(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDockingVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (double)((ArServerModeDock const *)arg1)->getDockingVoltage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDoneChargingVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDoneChargingVoltage(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDoneChargingVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (double)((ArServerModeDock const *)arg1)->getDoneChargingVoltage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDoneChargingMinutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDoneChargingMinutes(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDoneChargingMinutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (int)(arg1)->getDoneChargingMinutes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getUseChargeState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->getUseChargeState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDoneChargingAtFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoneChargingAtFloat(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDoneChargingAtFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->getDoneChargingAtFloat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setMinimumMinutesBetweenAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMinimumMinutesBetweenAutoDock(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getMinimumMinutesBetweenAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (int)(arg1)->getMinimumMinutesBetweenAutoDock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoDock(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->getAutoDock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addControlCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerHandlerCommands *arg2 = (ArServerHandlerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerHandlerCommands **)&jarg2; 
  (arg1)->addControlCommands(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addInfoCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerHandlerCommands *arg2 = (ArServerHandlerCommands *) 0 ;
  ArServerHandlerPopup *arg3 = (ArServerHandlerPopup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerHandlerCommands **)&jarg2; 
  arg3 = *(ArServerHandlerPopup **)&jarg3; 
  (arg1)->addInfoCommands(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setGetOverrideMapNameFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArRetFunctor< char const * > *arg2 = (ArRetFunctor< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArRetFunctor< char const * > **)&jarg2; 
  (arg1)->setGetOverrideMapNameFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverDock(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverUndock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverUndock(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverDockInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverDockInfo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverGetAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetAutoDock(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverSetAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverSetAutoDock(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverDockingAtToServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverDockingAtToServer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1serverDockingAtFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverDockingAtFromServer(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addStateChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addStateChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addStateChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addStateChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remStateChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remStateChangedCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getFailedGotoNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (unsigned int)(arg1)->getFailedGotoNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addForcedDockCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addForcedDockCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addForcedDockCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addForcedDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remForcedDockCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remForcedDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addIdleDockCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addIdleDockCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addIdleDockCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addIdleDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remIdleDockCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remIdleDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addRequestedDockCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addRequestedDockCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addRequestedDockCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addRequestedDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remRequestedDockCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remRequestedDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDrivingToDockCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDrivingToDockCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDrivingToDockCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDrivingToDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remDrivingToDockCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDrivingToDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDrivingIntoDockCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDrivingIntoDockCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDrivingIntoDockCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDrivingIntoDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remDrivingIntoDockCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDrivingIntoDockCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDockedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remDockedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addSingleShotDockedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSingleShotDockedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addSingleShotDockedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSingleShotDockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remSingleShotDockedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSingleShotDockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockNowUnforcedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDockNowUnforcedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockNowUnforcedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDockNowUnforcedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remDockNowUnforcedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDockNowUnforcedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockNowForcedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDockNowForcedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addDockNowForcedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDockNowForcedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remDockNowForcedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDockNowForcedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addUndockingCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addUndockingCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addUndockingCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addUndockingCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remUndockingCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remUndockingCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addUndockedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addUndockedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addUndockedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addUndockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remUndockedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remUndockedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDockInfoLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setDockInfoLogLevel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDockModeLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setDockModeLogLevel(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1subclassDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->subclassDoneCharging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1subclassNotDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (bool)(arg1)->subclassNotDoneCharging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1subclassNeedsAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->subclassNeedsAutoDock(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1subclassAddParamsDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->subclassAddParamsDoneCharging(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1subclassGetDockInfoString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jboolean jarg4) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->subclassGetDockInfoString(arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1baseAddParamsDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->baseAddParamsDoneCharging(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1baseAddParamDockUntilDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->baseAddParamDockUntilDoneCharging(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1baseAddParamMinutesToChargeFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->baseAddParamMinutesToChargeFor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1baseAddParamToChargeTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->baseAddParamToChargeTo(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDockFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (char *)((ArServerModeDock const *)arg1)->getDockFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDockFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDockFileName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1getDockBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  result = (char *)((ArServerModeDock const *)arg1)->getDockBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDockBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDockBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1restoreFromDockFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  (arg1)->restoreFromDockFile();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addPreWriteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreWriteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addPreWriteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remPreWriteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addPostWriteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPostWriteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1addPostWriteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1remPostPostWriteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostPostWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDock_1setDistanceCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerModeDock *arg1 = (ArServerModeDock *) 0 ;
  ArRetFunctor2< double,ArPose,ArPose > *arg2 = (ArRetFunctor2< double,ArPose,ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDock **)&jarg1; 
  arg2 = *(ArRetFunctor2< double,ArPose,ArPose > **)&jarg2; 
  (arg1)->setDistanceCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockPioneer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPioneer_1dock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  (arg1)->dock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPioneer_1undock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  (arg1)->undock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPioneer_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPioneer_1forceUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  (arg1)->forceUnlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPioneer_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPioneer *arg1 = (ArServerModeDockPioneer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPioneer **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockTriangleBump(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1dock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->dock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1undock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->undock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1forceUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->forceUnlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1beforeDriveInCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->beforeDriveInCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1afterDriveOutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->afterDriveOutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1backoutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  (arg1)->backoutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1setStallsAsBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStallsAsBumps(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1getStallsAsBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  result = (bool)(arg1)->getStallsAsBumps();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBump_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDockTriangleBump *arg1 = (ArServerModeDockTriangleBump *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDockTriangleBump **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockPatrolBot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1beforeDriveInCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  (arg1)->beforeDriveInCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBot_1afterDriveOutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPatrolBot *arg1 = (ArServerModeDockPatrolBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBot **)&jarg1; 
  (arg1)->afterDriveOutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockPatrolBotNiMH(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1subclassAddParamsDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->subclassAddParamsDoneCharging(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1subclassDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  result = (bool)(arg1)->subclassDoneCharging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1subclassNotDoneCharging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  result = (bool)(arg1)->subclassNotDoneCharging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1subclassNeedsAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->subclassNeedsAutoDock(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1subclassGetDockInfoString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jboolean jarg4) {
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->subclassGetDockInfoString(arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1setAutoDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoDock(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPatrolBotNiMH_1setNeedBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDockPatrolBotNiMH *arg1 = (ArServerModeDockPatrolBotNiMH *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPatrolBotNiMH **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNeedBalance(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockSimulator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockSimulator *arg1 = (ArServerModeDockSimulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockSimulator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockSimulator_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockSimulator *arg1 = (ArServerModeDockSimulator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockSimulator **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockSimulator_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockSimulator *arg1 = (ArServerModeDockSimulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockSimulator **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockSimulator_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockSimulator *arg1 = (ArServerModeDockSimulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockSimulator **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockSimulator_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockSimulator *arg1 = (ArServerModeDockSimulator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockSimulator **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockPowerBot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPowerBot_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPowerBot_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPowerBot_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPowerBot_1backoutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  (arg1)->backoutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockPowerBot_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDockPowerBot *arg1 = (ArServerModeDockPowerBot *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDockPowerBot **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockTriangleBumpBackwards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1dock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->dock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1undock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->undock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1forceUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->forceUnlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1beforeDriveInCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->beforeDriveInCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1afterDriveOutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->afterDriveOutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1pulloutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  (arg1)->pulloutCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1setStallsAsBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStallsAsBumps(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1getStallsAsBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  result = (bool)(arg1)->getStallsAsBumps();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockTriangleBumpBackwards_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDockTriangleBumpBackwards *arg1 = (ArServerModeDockTriangleBumpBackwards *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDockTriangleBumpBackwards **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_delete_1ArServerModeDockLynx(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1restoreFromDockFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->restoreFromDockFile();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1isDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  result = (bool)(arg1)->isDocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1enableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->enableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1disableDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->disableDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1checkDock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->checkDock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1beforeDriveInCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->beforeDriveInCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_ArServerModeDockLynx_1afterDriveOutCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDockLynx *arg1 = (ArServerModeDockLynx *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDockLynx **)&jarg1; 
  (arg1)->afterDriveOutCallback();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArLocalizationTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBaseLocalizationTask **)&baseptr = *(ArLocalizationTask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeDock **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockPioneerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDock **)&baseptr = *(ArServerModeDockPioneer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockTriangleBumpUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDock **)&baseptr = *(ArServerModeDockTriangleBump **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockPatrolBotUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDockTriangleBump **)&baseptr = *(ArServerModeDockPatrolBot **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockPatrolBotNiMHUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDockPatrolBot **)&baseptr = *(ArServerModeDockPatrolBotNiMH **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockSimulatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDockTriangleBump **)&baseptr = *(ArServerModeDockSimulator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockPowerBotUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDockTriangleBump **)&baseptr = *(ArServerModeDockPowerBot **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockTriangleBumpBackwardsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDock **)&baseptr = *(ArServerModeDockTriangleBumpBackwards **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Arnl_ArnlJavaJNI_SWIGArServerModeDockLynxUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerModeDockTriangleBumpBackwards **)&baseptr = *(ArServerModeDockLynx **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

