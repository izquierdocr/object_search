"""
Adept MobileRobots Advanced Robotics Navigation and Localization (ARNL)
Version 1.9.0

Copyright (C) 2004, 2005 ActivMedia Robotics LLC
Copyright (C) 2006-2009 MobileRobots Inc.
Copyright (C) 2010-2014 Adept Technology, Inc.

All Rights Reserved.

Adept MobileRobots does not make any representations about the
suitability of this software for any purpose.  It is provided "as is"
without express or implied warranty.

The license for this software is distributed as LICENSE.txt in the top
level directory.

robots@mobilerobots.com
Adept MobileRobots
10 Columbia Drive
Amherst, NH 03031
+1-603-881-7960

"""
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
Python wrapper library for ARNL
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ArnlPy', [dirname(__file__)])
        except ImportError:
            import _ArnlPy
            return _ArnlPy
        if fp is not None:
            try:
                _mod = imp.load_module('_ArnlPy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ArnlPy = swig_import_helper()
    del swig_import_helper
else:
    import _ArnlPy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


ARNL = _ArnlPy.ARNL
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _ArnlPy.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _ArnlPy.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _ArnlPy.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _ArnlPy.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _ArnlPy.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _ArnlPy.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _ArnlPy.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _ArnlPy.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _ArnlPy.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArnlPy.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _ArnlPy.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _ArnlPy.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArnlPy.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArnlPy.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _ArnlPy.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _ArnlPy.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _ArnlPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import AriaPy
SWIG_IMPORTED_ARIA = _ArnlPy.SWIG_IMPORTED_ARIA
import ArNetworkingPy
SWIG_IMPORTED_ARNETWORKING = _ArnlPy.SWIG_IMPORTED_ARNETWORKING
import BaseArnlPy
SWIG_IMPORTED_ARNL_BASE = _ArnlPy.SWIG_IMPORTED_ARNL_BASE
class ArLocalizationTask(BaseArnlPy.ArBaseLocalizationTask):
    """Proxy of C++ ArLocalizationTask class"""
    __swig_setmethods__ = {}
    for _s in [BaseArnlPy.ArBaseLocalizationTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArLocalizationTask, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseArnlPy.ArBaseLocalizationTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArLocalizationTask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, ArRangeDevice laser, char mapName) -> ArLocalizationTask
        __init__(self, ArRobot robot, ArRangeDevice laser, ArMapInterface ariaMap, 
            bool noReflectors = False) -> ArLocalizationTask
        __init__(self, ArRobot robot, ArRangeDevice laser, ArMapInterface ariaMap) -> ArLocalizationTask
        """
        this = _ArnlPy.new_ArLocalizationTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ArnlPy.delete_ArLocalizationTask
    __del__ = lambda self : None;
    def localizeRobotInMapInit(self, *args):
        """
        localizeRobotInMapInit(self, ArPose given, int numSamples, double stdX, double stdY, 
            double stdT, double thresFactor, bool warn = True, 
            bool setInitializedToFalse = True, 
            bool rayTrace = True) -> bool
        localizeRobotInMapInit(self, ArPose given, int numSamples, double stdX, double stdY, 
            double stdT, double thresFactor, bool warn = True, 
            bool setInitializedToFalse = True) -> bool
        localizeRobotInMapInit(self, ArPose given, int numSamples, double stdX, double stdY, 
            double stdT, double thresFactor, bool warn = True) -> bool
        localizeRobotInMapInit(self, ArPose given, int numSamples, double stdX, double stdY, 
            double stdT, double thresFactor) -> bool
        """
        return _ArnlPy.ArLocalizationTask_localizeRobotInMapInit(self, *args)

    def localizeRobotInMapMoved(self, *args):
        """
        localizeRobotInMapMoved(self, int numSamples, double distFactor, double angFactor, 
            double thresFactor) -> bool
        """
        return _ArnlPy.ArLocalizationTask_localizeRobotInMapMoved(self, *args)

    def localizeRobotAtHomeBlocking(self, *args):
        """
        localizeRobotAtHomeBlocking(self, double distSpread, double angleSpread, double probThreshold) -> bool
        localizeRobotAtHomeBlocking(self, double spreadX, double spreadY, double angleSpread, 
            double probThreshold) -> bool
        localizeRobotAtHomeBlocking(self, double distSpread, double angleSpread) -> bool
        localizeRobotAtHomeBlocking(self) -> bool
        """
        return _ArnlPy.ArLocalizationTask_localizeRobotAtHomeBlocking(self, *args)

    def localizeRobotAtHomeNonBlocking(self):
        """localizeRobotAtHomeNonBlocking(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_localizeRobotAtHomeNonBlocking(self)

    def getRobotHome(self):
        """getRobotHome(self) -> ArPose"""
        return _ArnlPy.ArLocalizationTask_getRobotHome(self)

    def setForceUpdateParams(self, *args):
        """setForceUpdateParams(self, int numSamples, double xStd, double yStd, double tStd)"""
        return _ArnlPy.ArLocalizationTask_setForceUpdateParams(self, *args)

    def forceUpdatePose(self, *args):
        """
        forceUpdatePose(self, ArPose forcePose, bool rayTrace = False)
        forceUpdatePose(self, ArPose forcePose)
        """
        return _ArnlPy.ArLocalizationTask_forceUpdatePose(self, *args)

    def addFailedLocalizationCB(self, *args):
        """addFailedLocalizationCB(self, ArFunctor1_Int functor)"""
        return _ArnlPy.ArLocalizationTask_addFailedLocalizationCB(self, *args)

    def remFailedLocalizationCB(self, *args):
        """remFailedLocalizationCB(self, ArFunctor1_Int functor)"""
        return _ArnlPy.ArLocalizationTask_remFailedLocalizationCB(self, *args)

    def setGridResolution(self, *args):
        """setGridResolution(self, double res, ArMapInterface ariaMap) -> bool"""
        return _ArnlPy.ArLocalizationTask_setGridResolution(self, *args)

    def setFailedCallBack(self, *args):
        """setFailedCallBack(self, ArFunctor1_Int fcb)"""
        return _ArnlPy.ArLocalizationTask_setFailedCallBack(self, *args)

    def setTriggerDelR(self, *args):
        """setTriggerDelR(self, double tr)"""
        return _ArnlPy.ArLocalizationTask_setTriggerDelR(self, *args)

    def setTriggerDelT(self, *args):
        """setTriggerDelT(self, double tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerDelT(self, *args)

    def setTriggerTimeFlag(self, *args):
        """setTriggerTimeFlag(self, bool tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerTimeFlag(self, *args)

    def setTriggerTime(self, *args):
        """setTriggerTime(self, double tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerTime(self, *args)

    def setTriggerTimeX(self, *args):
        """setTriggerTimeX(self, double tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerTimeX(self, *args)

    def setTriggerTimeY(self, *args):
        """setTriggerTimeY(self, double tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerTimeY(self, *args)

    def setTriggerTimeTh(self, *args):
        """setTriggerTimeTh(self, double tt)"""
        return _ArnlPy.ArLocalizationTask_setTriggerTimeTh(self, *args)

    def setNumSamples(self, *args):
        """setNumSamples(self, int n)"""
        return _ArnlPy.ArLocalizationTask_setNumSamples(self, *args)

    def setNumSamplesAtInit(self, *args):
        """setNumSamplesAtInit(self, int n)"""
        return _ArnlPy.ArLocalizationTask_setNumSamplesAtInit(self, *args)

    def setRayTraceAtInit(self, *args):
        """setRayTraceAtInit(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setRayTraceAtInit(self, *args)

    def setCurrentNumSamples(self, *args):
        """setCurrentNumSamples(self, int n)"""
        return _ArnlPy.ArLocalizationTask_setCurrentNumSamples(self, *args)

    def setPassThreshold(self, *args):
        """setPassThreshold(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setPassThreshold(self, *args)

    def setLostThreshold(self, *args):
        """setLostThreshold(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setLostThreshold(self, *args)

    def setSensorBelief(self, *args):
        """setSensorBelief(self, double sensorBelief)"""
        return _ArnlPy.ArLocalizationTask_setSensorBelief(self, *args)

    def setCurrentLocaPose(self, *args):
        """
        setCurrentLocaPose(self, double x, double y, double th)
        setCurrentLocaPose(self, ArPose p)
        """
        return _ArnlPy.ArLocalizationTask_setCurrentLocaPose(self, *args)

    def setVerboseFlag(self, *args):
        """setVerboseFlag(self, bool a)"""
        return _ArnlPy.ArLocalizationTask_setVerboseFlag(self, *args)

    def setAngleIncrement(self, *args):
        """setAngleIncrement(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setAngleIncrement(self, *args)

    def setKillThreshold(self, *args):
        """setKillThreshold(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setKillThreshold(self, *args)

    def setRecoverOnFailedFlag(self, *args):
        """setRecoverOnFailedFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setRecoverOnFailedFlag(self, *args)

    def setIdleFlag(self, *args):
        """setIdleFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setIdleFlag(self, *args)

    def setReloadingMapFlag(self, *args):
        """setReloadingMapFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setReloadingMapFlag(self, *args)

    def setEnableReflectorLocalizationFlag(self, *args):
        """setEnableReflectorLocalizationFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setEnableReflectorLocalizationFlag(self, *args)

    def setReflectorVar(self, *args):
        """setReflectorVar(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorVar(self, *args)

    def setReflectorMatchDist(self, *args):
        """setReflectorMatchDist(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorMatchDist(self, *args)

    def setReflectorMatchAngle(self, *args):
        """setReflectorMatchAngle(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorMatchAngle(self, *args)

    def setReflectorMaxRange(self, *args):
        """setReflectorMaxRange(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorMaxRange(self, *args)

    def setReflectorMaxAngle(self, *args):
        """setReflectorMaxAngle(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorMaxAngle(self, *args)

    def setReflectorSize(self, *args):
        """setReflectorSize(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setReflectorSize(self, *args)

    def setReflectanceThreshold(self, *args):
        """setReflectanceThreshold(self, int f)"""
        return _ArnlPy.ArLocalizationTask_setReflectanceThreshold(self, *args)

    def setBypassMCLFlag(self, *args):
        """setBypassMCLFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setBypassMCLFlag(self, *args)

    def getForceUpdateParams(self, *args):
        """
        getForceUpdateParams(self, ArPose forcePose, int numSamples, double xStd, double yStd, 
            double tStd)
        """
        return _ArnlPy.ArLocalizationTask_getForceUpdateParams(self, *args)

    def getVerboseFlag(self):
        """getVerboseFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getVerboseFlag(self)

    def getInitializedFlag(self):
        """getInitializedFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getInitializedFlag(self)

    def getNumSamples(self):
        """getNumSamples(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getNumSamples(self)

    def getNumSamplesAtInit(self):
        """getNumSamplesAtInit(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getNumSamplesAtInit(self)

    def getRayTraceAtInit(self):
        """getRayTraceAtInit(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getRayTraceAtInit(self)

    def getCurrentNumSamples(self):
        """getCurrentNumSamples(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getCurrentNumSamples(self)

    def getRobotMaxProbPose(self):
        """getRobotMaxProbPose(self) -> ArPose"""
        return _ArnlPy.ArLocalizationTask_getRobotMaxProbPose(self)

    def getTriggerDelR(self):
        """getTriggerDelR(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerDelR(self)

    def getTriggerDelT(self):
        """getTriggerDelT(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerDelT(self)

    def getTriggerTimeFlag(self):
        """getTriggerTimeFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getTriggerTimeFlag(self)

    def getTriggerTime(self):
        """getTriggerTime(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerTime(self)

    def getTriggerTimeX(self):
        """getTriggerTimeX(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerTimeX(self)

    def getTriggerTimeY(self):
        """getTriggerTimeY(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerTimeY(self)

    def getTriggerTimeTh(self):
        """getTriggerTimeTh(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTriggerTimeTh(self)

    def getPassThreshold(self):
        """getPassThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPassThreshold(self)

    def getLostThreshold(self):
        """getLostThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getLostThreshold(self)

    def getUsingPassThreshold(self):
        """getUsingPassThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getUsingPassThreshold(self)

    def setTempPassThreshold(self, *args):
        """setTempPassThreshold(self, double passThreshold)"""
        return _ArnlPy.ArLocalizationTask_setTempPassThreshold(self, *args)

    def getTempPassThreshold(self):
        """getTempPassThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getTempPassThreshold(self)

    def clearTempPassThreshold(self):
        """clearTempPassThreshold(self)"""
        return _ArnlPy.ArLocalizationTask_clearTempPassThreshold(self)

    def getLocalizationScore(self):
        """getLocalizationScore(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getLocalizationScore(self)

    def getLocalizationThreshold(self):
        """getLocalizationThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getLocalizationThreshold(self)

    def getMCLocalizationScore(self):
        """getMCLocalizationScore(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getMCLocalizationScore(self)

    def getRefLocalizationScore(self):
        """getRefLocalizationScore(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getRefLocalizationScore(self)

    def getCurrentLocaPose(self):
        """getCurrentLocaPose(self) -> ArPose"""
        return _ArnlPy.ArLocalizationTask_getCurrentLocaPose(self)

    def getStdX(self):
        """getStdX(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getStdX(self)

    def getStdY(self):
        """getStdY(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getStdY(self)

    def getStdTh(self):
        """getStdTh(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getStdTh(self)

    def getErrorMmPerMm(self):
        """getErrorMmPerMm(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getErrorMmPerMm(self)

    def getErrorDegPerDeg(self):
        """getErrorDegPerDeg(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getErrorDegPerDeg(self)

    def getErrorDegPerMm(self):
        """getErrorDegPerMm(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getErrorDegPerMm(self)

    def getSensorBelief(self, *args):
        """
        getSensorBelief(self) -> double
        getSensorBelief(self) -> double
        """
        return _ArnlPy.ArLocalizationTask_getSensorBelief(self, *args)

    def getPeakFactor(self):
        """getPeakFactor(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeakFactor(self)

    def getOccThreshold(self):
        """getOccThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getOccThreshold(self)

    def getGridRes(self):
        """getGridRes(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getGridRes(self)

    def getMapName(self):
        """getMapName(self) -> char"""
        return _ArnlPy.ArLocalizationTask_getMapName(self)

    def getPeturbRangeX(self):
        """getPeturbRangeX(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeturbRangeX(self)

    def getPeturbRangeY(self):
        """getPeturbRangeY(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeturbRangeY(self)

    def getPeturbRangeTh(self):
        """getPeturbRangeTh(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeturbRangeTh(self)

    def getFailedRangeX(self):
        """getFailedRangeX(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getFailedRangeX(self)

    def getFailedRangeY(self):
        """getFailedRangeY(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getFailedRangeY(self)

    def getFailedRangeTh(self):
        """getFailedRangeTh(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getFailedRangeTh(self)

    def getPeakStdX(self):
        """getPeakStdX(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeakStdX(self)

    def getPeakStdY(self):
        """getPeakStdY(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeakStdY(self)

    def getPeakStdTh(self):
        """getPeakStdTh(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getPeakStdTh(self)

    def getAngleIncrement(self):
        """getAngleIncrement(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getAngleIncrement(self)

    def getKillThreshold(self):
        """getKillThreshold(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getKillThreshold(self)

    def getAriaMap(self):
        """getAriaMap(self) -> ArMapInterface"""
        return _ArnlPy.ArLocalizationTask_getAriaMap(self)

    def getBufferSize(self):
        """getBufferSize(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getBufferSize(self)

    def getXYBuffer(self):
        """getXYBuffer(self) -> std::vector<(ArPose,std::allocator<(ArPose)>)>"""
        return _ArnlPy.ArLocalizationTask_getXYBuffer(self)

    def getBufferPose(self):
        """getBufferPose(self) -> ArPose"""
        return _ArnlPy.ArLocalizationTask_getBufferPose(self)

    def getOccGridPtr(self):
        """getOccGridPtr(self) -> ArOccGrid"""
        return _ArnlPy.ArLocalizationTask_getOccGridPtr(self)

    def getCurrentSamplePoses(self):
        """getCurrentSamplePoses(self) -> ArPoseList"""
        return _ArnlPy.ArLocalizationTask_getCurrentSamplePoses(self)

    def getRecoverOnFailedFlag(self):
        """getRecoverOnFailedFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getRecoverOnFailedFlag(self)

    def getIgnoreIllegalPoseFlag(self):
        """getIgnoreIllegalPoseFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getIgnoreIllegalPoseFlag(self)

    def getAdjustNumSamplesFlag(self):
        """getAdjustNumSamplesFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getAdjustNumSamplesFlag(self)

    def getMinNumSamples(self):
        """getMinNumSamples(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getMinNumSamples(self)

    def getNumSamplesAngleFactor(self):
        """getNumSamplesAngleFactor(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getNumSamplesAngleFactor(self)

    def getSensorSetFlag(self):
        """getSensorSetFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getSensorSetFlag(self)

    def getEnableReflectorLocalizationFlag(self):
        """getEnableReflectorLocalizationFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getEnableReflectorLocalizationFlag(self)

    def getReflectorVar(self):
        """getReflectorVar(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorVar(self)

    def getReflectorMatchDist(self):
        """getReflectorMatchDist(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorMatchDist(self)

    def getReflectorMatchAngle(self):
        """getReflectorMatchAngle(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorMatchAngle(self)

    def getReflectorMaxRange(self):
        """getReflectorMaxRange(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorMaxRange(self)

    def getReflectorMaxAngle(self):
        """getReflectorMaxAngle(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorMaxAngle(self)

    def getReflectorSize(self):
        """getReflectorSize(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorSize(self)

    def getReflectanceThreshold(self):
        """getReflectanceThreshold(self) -> int"""
        return _ArnlPy.ArLocalizationTask_getReflectanceThreshold(self)

    def getBypassMCLFlag(self):
        """getBypassMCLFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getBypassMCLFlag(self)

    def getReflectorTriDistLimit(self):
        """getReflectorTriDistLimit(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorTriDistLimit(self)

    def getReflectorTriAngLimit(self):
        """getReflectorTriAngLimit(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorTriAngLimit(self)

    def getBadReflectorFactor(self):
        """getBadReflectorFactor(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getBadReflectorFactor(self)

    def getReflectorRangeFactor(self):
        """getReflectorRangeFactor(self) -> double"""
        return _ArnlPy.ArLocalizationTask_getReflectorRangeFactor(self)

    def getQParams(self):
        """getQParams(self) -> ArMatrix"""
        return _ArnlPy.ArLocalizationTask_getQParams(self)

    def getState(self):
        """getState(self) -> LocalizationState"""
        return _ArnlPy.ArLocalizationTask_getState(self)

    def getIdleFlag(self):
        """getIdleFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getIdleFlag(self)

    def getReloadingMapFlag(self):
        """getReloadingMapFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getReloadingMapFlag(self)

    def readMapFromFile(self, *args):
        """readMapFromFile(self, char mapName) -> ArMapInterface"""
        return _ArnlPy.ArLocalizationTask_readMapFromFile(self, *args)

    def readAriaMap(self, *args):
        """readAriaMap(self, ArMapInterface ariaMap) -> ArMapInterface"""
        return _ArnlPy.ArLocalizationTask_readAriaMap(self, *args)

    def loadParamFile(self, *args):
        """loadParamFile(self, char file) -> bool"""
        return _ArnlPy.ArLocalizationTask_loadParamFile(self, *args)

    def saveParams(self, *args):
        """saveParams(self, char filename) -> bool"""
        return _ArnlPy.ArLocalizationTask_saveParams(self, *args)

    def fillHistogram(self, *args):
        """fillHistogram(self, double hist, double cumSum, int numSamples) -> bool"""
        return _ArnlPy.ArLocalizationTask_fillHistogram(self, *args)

    def scanToGlobalCoords(self, *args):
        """scanToGlobalCoords(self, ArPose robPose, std::vector<(ArPose,std::allocator<(ArPose)>)> xyLrf) -> bool"""
        return _ArnlPy.ArLocalizationTask_scanToGlobalCoords(self, *args)

    def getLastLocaTime(self):
        """getLastLocaTime(self) -> ArTime"""
        return _ArnlPy.ArLocalizationTask_getLastLocaTime(self)

    def setLocaParams(self, *args):
        """
        setLocaParams(self, double xStd, double yStd, double tStd, double kMmPerMm, 
            double kDegPerDeg, double kDegPerMm, double sensorBelief) -> bool
        """
        return _ArnlPy.ArLocalizationTask_setLocaParams(self, *args)

    def setIgnoreIllegalPoseFlag(self, *args):
        """setIgnoreIllegalPoseFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setIgnoreIllegalPoseFlag(self, *args)

    def setAdjustNumSamplesFlag(self, *args):
        """setAdjustNumSamplesFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setAdjustNumSamplesFlag(self, *args)

    def setMinNumSamples(self, *args):
        """setMinNumSamples(self, int n)"""
        return _ArnlPy.ArLocalizationTask_setMinNumSamples(self, *args)

    def setNumSamplesAngleFactor(self, *args):
        """setNumSamplesAngleFactor(self, double f)"""
        return _ArnlPy.ArLocalizationTask_setNumSamplesAngleFactor(self, *args)

    def setLastLocaTimeToNow(self):
        """setLastLocaTimeToNow(self)"""
        return _ArnlPy.ArLocalizationTask_setLastLocaTimeToNow(self)

    def setSensorSetFlag(self, *args):
        """setSensorSetFlag(self, bool p)"""
        return _ArnlPy.ArLocalizationTask_setSensorSetFlag(self, *args)

    def computeLastLocaMeanVar(self, *args):
        """computeLastLocaMeanVar(self, ArPose mean, ArMatrix Var) -> bool"""
        return _ArnlPy.ArLocalizationTask_computeLastLocaMeanVar(self, *args)

    def findMCLMeanVar(self, *args):
        """findMCLMeanVar(self, ArPose mean, ArMatrix Var) -> bool"""
        return _ArnlPy.ArLocalizationTask_findMCLMeanVar(self, *args)

    def findLocalizationMeanVar(self, *args):
        """findLocalizationMeanVar(self, ArPose mean, ArMatrix Var) -> bool"""
        return _ArnlPy.ArLocalizationTask_findLocalizationMeanVar(self, *args)

    def setCorrectRobotFlag(self, *args):
        """setCorrectRobotFlag(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setCorrectRobotFlag(self, *args)

    def setRobotPose(self, *args):
        """
        setRobotPose(self, ArPose pose, ArPose spread = ArPose(0, 0, 0), int nSam = 0)
        setRobotPose(self, ArPose pose, ArPose spread = ArPose(0, 0, 0))
        setRobotPose(self, ArPose pose)
        """
        return _ArnlPy.ArLocalizationTask_setRobotPose(self, *args)

    def getRobotIsLostFlag(self):
        """getRobotIsLostFlag(self) -> bool"""
        return _ArnlPy.ArLocalizationTask_getRobotIsLostFlag(self)

    def setLocalizationIdle(self, *args):
        """setLocalizationIdle(self, bool f)"""
        return _ArnlPy.ArLocalizationTask_setLocalizationIdle(self, *args)

    def drawRangePoints(self, *args):
        """drawRangePoints(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawRangePoints(self, *args)

    def drawReflectorRays(self, *args):
        """drawReflectorRays(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawReflectorRays(self, *args)

    def drawSamplePoses(self, *args):
        """drawSamplePoses(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawSamplePoses(self, *args)

    def drawSampleBounds(self, *args):
        """drawSampleBounds(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawSampleBounds(self, *args)

    def drawKalmanVariance(self, *args):
        """drawKalmanVariance(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawKalmanVariance(self, *args)

    def drawMCLVariance(self, *args):
        """drawMCLVariance(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArLocalizationTask_drawMCLVariance(self, *args)

    def setMultiRobotCallback(self, *args):
        """setMultiRobotCallback(self, ArRetFunctor<(std::list<(ArMultiRobotPoseAndRadius,std::allocator<(ArMultiRobotPoseAndRadius)>)>)> func)"""
        return _ArnlPy.ArLocalizationTask_setMultiRobotCallback(self, *args)

    def setInitializedFlag(self, *args):
        """setInitializedFlag(self, bool a)"""
        return _ArnlPy.ArLocalizationTask_setInitializedFlag(self, *args)

ArLocalizationTask_swigregister = _ArnlPy.ArLocalizationTask_swigregister
ArLocalizationTask_swigregister(ArLocalizationTask)

class ArDockInterface(_object):
    """Proxy of C++ ArDockInterface class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArDockInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArDockInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UNDOCKED = _ArnlPy.ArDockInterface_UNDOCKED
    DOCKING = _ArnlPy.ArDockInterface_DOCKING
    DOCKED = _ArnlPy.ArDockInterface_DOCKED
    UNDOCKING = _ArnlPy.ArDockInterface_UNDOCKING
    def toString(*args):
        """toString(State s) -> char"""
        return _ArnlPy.ArDockInterface_toString(*args)

    if _newclass:toString = staticmethod(toString)
    __swig_getmethods__["toString"] = lambda x: toString
    __swig_destroy__ = _ArnlPy.delete_ArDockInterface
    __del__ = lambda self : None;
    def getState(self):
        """getState(self) -> State"""
        return _ArnlPy.ArDockInterface_getState(self)

    def getForcedDock(self):
        """getForcedDock(self) -> bool"""
        return _ArnlPy.ArDockInterface_getForcedDock(self)

    def isForcedDockAvailable(self):
        """isForcedDockAvailable(self) -> bool"""
        return _ArnlPy.ArDockInterface_isForcedDockAvailable(self)

    def getAutoDock(self):
        """getAutoDock(self) -> bool"""
        return _ArnlPy.ArDockInterface_getAutoDock(self)

    def isAutoDockAvailable(self):
        """isAutoDockAvailable(self) -> bool"""
        return _ArnlPy.ArDockInterface_isAutoDockAvailable(self)

    def hasGoToDockBeenSent(self):
        """hasGoToDockBeenSent(self) -> bool"""
        return _ArnlPy.ArDockInterface_hasGoToDockBeenSent(self)

    def gotoDock(self, force = True):
        """
        gotoDock(self, bool force = True)
        gotoDock(self)
        """
        return _ArnlPy.ArDockInterface_gotoDock(self, force)

ArDockInterface_swigregister = _ArnlPy.ArDockInterface_swigregister
ArDockInterface_swigregister(ArDockInterface)

def ArDockInterface_toString(*args):
  """ArDockInterface_toString(State s) -> char"""
  return _ArnlPy.ArDockInterface_toString(*args)

class ArServerModeDock(ArNetworkingPy.ArServerMode,ArDockInterface):
    """Proxy of C++ ArServerModeDock class"""
    __swig_setmethods__ = {}
    for _s in [ArNetworkingPy.ArServerMode,ArDockInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDock, name, value)
    __swig_getmethods__ = {}
    for _s in [ArNetworkingPy.ArServerMode,ArDockInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDock, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDock
    __del__ = lambda self : None;
    def createDock(*args):
        """
        createDock(ArServerBase serverBase, ArRobot robot, ArLocalizationTask locTask, 
            ArPathPlanningInterface pathTask, 
            ArFunctor shutdownFunctor = None) -> ArServerModeDock
        createDock(ArServerBase serverBase, ArRobot robot, ArLocalizationTask locTask, 
            ArPathPlanningInterface pathTask) -> ArServerModeDock
        """
        return _ArnlPy.ArServerModeDock_createDock(*args)

    if _newclass:createDock = staticmethod(createDock)
    __swig_getmethods__["createDock"] = lambda x: createDock
    def getState(self):
        """getState(self) -> State"""
        return _ArnlPy.ArServerModeDock_getState(self)

    def dock(self):
        """dock(self)"""
        return _ArnlPy.ArServerModeDock_dock(self)

    def undock(self):
        """undock(self)"""
        return _ArnlPy.ArServerModeDock_undock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDock_checkDock(self)

    def activateAsDocked(self):
        """activateAsDocked(self)"""
        return _ArnlPy.ArServerModeDock_activateAsDocked(self)

    def checkDefault(self):
        """checkDefault(self)"""
        return _ArnlPy.ArServerModeDock_checkDefault(self)

    def activate(self):
        """activate(self)"""
        return _ArnlPy.ArServerModeDock_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _ArnlPy.ArServerModeDock_deactivate(self)

    def requestUnlock(self):
        """requestUnlock(self)"""
        return _ArnlPy.ArServerModeDock_requestUnlock(self)

    def getForcedDock(self):
        """getForcedDock(self) -> bool"""
        return _ArnlPy.ArServerModeDock_getForcedDock(self)

    def isForcedDockAvailable(self):
        """isForcedDockAvailable(self) -> bool"""
        return _ArnlPy.ArServerModeDock_isForcedDockAvailable(self)

    def isAutoDockAvailable(self):
        """isAutoDockAvailable(self) -> bool"""
        return _ArnlPy.ArServerModeDock_isAutoDockAvailable(self)

    def hasGoToDockBeenSent(self):
        """hasGoToDockBeenSent(self) -> bool"""
        return _ArnlPy.ArServerModeDock_hasGoToDockBeenSent(self)

    def gotoDock(self, *args):
        """gotoDock(self, bool force)"""
        return _ArnlPy.ArServerModeDock_gotoDock(self, *args)

    def requestForcedDock(self):
        """requestForcedDock(self)"""
        return _ArnlPy.ArServerModeDock_requestForcedDock(self)

    def forceUnlock(self):
        """forceUnlock(self)"""
        return _ArnlPy.ArServerModeDock_forceUnlock(self)

    def getDockName(self):
        """getDockName(self) -> char"""
        return _ArnlPy.ArServerModeDock_getDockName(self)

    def setDockingVoltage(self, *args):
        """setDockingVoltage(self, double dockingVoltage)"""
        return _ArnlPy.ArServerModeDock_setDockingVoltage(self, *args)

    def getDockingVoltage(self):
        """getDockingVoltage(self) -> double"""
        return _ArnlPy.ArServerModeDock_getDockingVoltage(self)

    def setDoneChargingVoltage(self, *args):
        """setDoneChargingVoltage(self, double doneChargingVoltage)"""
        return _ArnlPy.ArServerModeDock_setDoneChargingVoltage(self, *args)

    def getDoneChargingVoltage(self):
        """getDoneChargingVoltage(self) -> double"""
        return _ArnlPy.ArServerModeDock_getDoneChargingVoltage(self)

    def setDoneChargingMinutes(self, *args):
        """setDoneChargingMinutes(self, int doneChargingMinutes)"""
        return _ArnlPy.ArServerModeDock_setDoneChargingMinutes(self, *args)

    def getDoneChargingMinutes(self):
        """getDoneChargingMinutes(self) -> int"""
        return _ArnlPy.ArServerModeDock_getDoneChargingMinutes(self)

    def getUseChargeState(self):
        """getUseChargeState(self) -> bool"""
        return _ArnlPy.ArServerModeDock_getUseChargeState(self)

    def setDoneChargingAtFloat(self, *args):
        """setDoneChargingAtFloat(self, bool doneChargingAtFloat)"""
        return _ArnlPy.ArServerModeDock_setDoneChargingAtFloat(self, *args)

    def getDoneChargingAtFloat(self):
        """getDoneChargingAtFloat(self) -> bool"""
        return _ArnlPy.ArServerModeDock_getDoneChargingAtFloat(self)

    def setMinimumMinutesBetweenAutoDock(self, *args):
        """setMinimumMinutesBetweenAutoDock(self, int minutesBetween)"""
        return _ArnlPy.ArServerModeDock_setMinimumMinutesBetweenAutoDock(self, *args)

    def getMinimumMinutesBetweenAutoDock(self):
        """getMinimumMinutesBetweenAutoDock(self) -> int"""
        return _ArnlPy.ArServerModeDock_getMinimumMinutesBetweenAutoDock(self)

    def setAutoDock(self, *args):
        """setAutoDock(self, bool autoDocking)"""
        return _ArnlPy.ArServerModeDock_setAutoDock(self, *args)

    def getAutoDock(self):
        """getAutoDock(self) -> bool"""
        return _ArnlPy.ArServerModeDock_getAutoDock(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _ArnlPy.ArServerModeDock_addToConfig(self, *args)

    def addControlCommands(self, *args):
        """addControlCommands(self, ArServerHandlerCommands handlerCommands)"""
        return _ArnlPy.ArServerModeDock_addControlCommands(self, *args)

    def addInfoCommands(self, *args):
        """addInfoCommands(self, ArServerHandlerCommands handlerCommands, ArServerHandlerPopup handlerPopup)"""
        return _ArnlPy.ArServerModeDock_addInfoCommands(self, *args)

    def setGetOverrideMapNameFunctor(self, *args):
        """setGetOverrideMapNameFunctor(self, ArRetFunctor<(p.q(const).char)> getOverrideMapNameFunctor)"""
        return _ArnlPy.ArServerModeDock_setGetOverrideMapNameFunctor(self, *args)

    def serverDock(self, *args):
        """serverDock(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverDock(self, *args)

    def serverUndock(self, *args):
        """serverUndock(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverUndock(self, *args)

    def serverDockInfo(self, *args):
        """serverDockInfo(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverDockInfo(self, *args)

    def serverGetAutoDock(self, *args):
        """serverGetAutoDock(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverGetAutoDock(self, *args)

    def serverSetAutoDock(self, *args):
        """serverSetAutoDock(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverSetAutoDock(self, *args)

    def serverDockingAtToServer(self, *args):
        """serverDockingAtToServer(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverDockingAtToServer(self, *args)

    def serverDockingAtFromServer(self, *args):
        """serverDockingAtFromServer(self, ArServerClient client, ArNetPacket packet)"""
        return _ArnlPy.ArServerModeDock_serverDockingAtFromServer(self, *args)

    def addStateChangedCB(self, *args):
        """
        addStateChangedCB(self, ArFunctor functor, Pos position = LAST)
        addStateChangedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addStateChangedCB(self, *args)

    def remStateChangedCB(self, *args):
        """remStateChangedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remStateChangedCB(self, *args)

    def getFailedGotoNum(self):
        """getFailedGotoNum(self) -> unsigned int"""
        return _ArnlPy.ArServerModeDock_getFailedGotoNum(self)

    def addForcedDockCB(self, *args):
        """
        addForcedDockCB(self, ArFunctor functor, int position = 50)
        addForcedDockCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addForcedDockCB(self, *args)

    def remForcedDockCB(self, *args):
        """remForcedDockCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remForcedDockCB(self, *args)

    def addIdleDockCB(self, *args):
        """
        addIdleDockCB(self, ArFunctor functor, int position = 50)
        addIdleDockCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addIdleDockCB(self, *args)

    def remIdleDockCB(self, *args):
        """remIdleDockCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remIdleDockCB(self, *args)

    def addRequestedDockCB(self, *args):
        """
        addRequestedDockCB(self, ArFunctor functor, int position = 50)
        addRequestedDockCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addRequestedDockCB(self, *args)

    def remRequestedDockCB(self, *args):
        """remRequestedDockCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remRequestedDockCB(self, *args)

    def addDrivingToDockCB(self, *args):
        """
        addDrivingToDockCB(self, ArFunctor functor, int position = 50)
        addDrivingToDockCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addDrivingToDockCB(self, *args)

    def remDrivingToDockCB(self, *args):
        """remDrivingToDockCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remDrivingToDockCB(self, *args)

    def addDrivingIntoDockCB(self, *args):
        """
        addDrivingIntoDockCB(self, ArFunctor functor, int position = 50)
        addDrivingIntoDockCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addDrivingIntoDockCB(self, *args)

    def remDrivingIntoDockCB(self, *args):
        """remDrivingIntoDockCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remDrivingIntoDockCB(self, *args)

    def addDockedCB(self, *args):
        """
        addDockedCB(self, ArFunctor functor, int position = 50)
        addDockedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addDockedCB(self, *args)

    def remDockedCB(self, *args):
        """remDockedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remDockedCB(self, *args)

    def addSingleShotDockedCB(self, *args):
        """
        addSingleShotDockedCB(self, ArFunctor functor, int position = 50)
        addSingleShotDockedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addSingleShotDockedCB(self, *args)

    def remSingleShotDockedCB(self, *args):
        """remSingleShotDockedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remSingleShotDockedCB(self, *args)

    def addDockNowUnforcedCB(self, *args):
        """
        addDockNowUnforcedCB(self, ArFunctor functor, int position = 50)
        addDockNowUnforcedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addDockNowUnforcedCB(self, *args)

    def remDockNowUnforcedCB(self, *args):
        """remDockNowUnforcedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remDockNowUnforcedCB(self, *args)

    def addDockNowForcedCB(self, *args):
        """
        addDockNowForcedCB(self, ArFunctor functor, int position = 50)
        addDockNowForcedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addDockNowForcedCB(self, *args)

    def remDockNowForcedCB(self, *args):
        """remDockNowForcedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remDockNowForcedCB(self, *args)

    def addUndockingCB(self, *args):
        """
        addUndockingCB(self, ArFunctor functor, int position = 50)
        addUndockingCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addUndockingCB(self, *args)

    def remUndockingCB(self, *args):
        """remUndockingCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remUndockingCB(self, *args)

    def addUndockedCB(self, *args):
        """
        addUndockedCB(self, ArFunctor functor, int position = 50)
        addUndockedCB(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addUndockedCB(self, *args)

    def remUndockedCB(self, *args):
        """remUndockedCB(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remUndockedCB(self, *args)

    def setDockInfoLogLevel(self, *args):
        """setDockInfoLogLevel(self, LogLevel logLevel)"""
        return _ArnlPy.ArServerModeDock_setDockInfoLogLevel(self, *args)

    def setDockModeLogLevel(self, *args):
        """setDockModeLogLevel(self, LogLevel logLevel)"""
        return _ArnlPy.ArServerModeDock_setDockModeLogLevel(self, *args)

    def subclassDoneCharging(self):
        """subclassDoneCharging(self) -> bool"""
        return _ArnlPy.ArServerModeDock_subclassDoneCharging(self)

    def subclassNotDoneCharging(self):
        """subclassNotDoneCharging(self) -> bool"""
        return _ArnlPy.ArServerModeDock_subclassNotDoneCharging(self)

    def subclassNeedsAutoDock(self, *args):
        """subclassNeedsAutoDock(self, char reason, size_t lenOfReason) -> bool"""
        return _ArnlPy.ArServerModeDock_subclassNeedsAutoDock(self, *args)

    def subclassAddParamsDoneCharging(self, *args):
        """subclassAddParamsDoneCharging(self, ArConfig config, char section) -> bool"""
        return _ArnlPy.ArServerModeDock_subclassAddParamsDoneCharging(self, *args)

    def subclassGetDockInfoString(self, *args):
        """subclassGetDockInfoString(self, char dockInfoStr, size_t dockInfoStrLength, bool terse)"""
        return _ArnlPy.ArServerModeDock_subclassGetDockInfoString(self, *args)

    def baseAddParamsDoneCharging(self, *args):
        """baseAddParamsDoneCharging(self, ArConfig config, char section)"""
        return _ArnlPy.ArServerModeDock_baseAddParamsDoneCharging(self, *args)

    def baseAddParamDockUntilDoneCharging(self, *args):
        """baseAddParamDockUntilDoneCharging(self, ArConfig config, char section)"""
        return _ArnlPy.ArServerModeDock_baseAddParamDockUntilDoneCharging(self, *args)

    def baseAddParamMinutesToChargeFor(self, *args):
        """baseAddParamMinutesToChargeFor(self, ArConfig config, char section)"""
        return _ArnlPy.ArServerModeDock_baseAddParamMinutesToChargeFor(self, *args)

    def baseAddParamToChargeTo(self, *args):
        """baseAddParamToChargeTo(self, ArConfig config, char section)"""
        return _ArnlPy.ArServerModeDock_baseAddParamToChargeTo(self, *args)

    def getDockFileName(self):
        """getDockFileName(self) -> char"""
        return _ArnlPy.ArServerModeDock_getDockFileName(self)

    def setDockFileName(self, *args):
        """setDockFileName(self, char fileName)"""
        return _ArnlPy.ArServerModeDock_setDockFileName(self, *args)

    def getDockBaseDirectory(self):
        """getDockBaseDirectory(self) -> char"""
        return _ArnlPy.ArServerModeDock_getDockBaseDirectory(self)

    def setDockBaseDirectory(self, *args):
        """setDockBaseDirectory(self, char baseDirectory)"""
        return _ArnlPy.ArServerModeDock_setDockBaseDirectory(self, *args)

    def restoreFromDockFile(self):
        """restoreFromDockFile(self)"""
        return _ArnlPy.ArServerModeDock_restoreFromDockFile(self)

    def addPreWriteCallback(self, *args):
        """
        addPreWriteCallback(self, ArFunctor functor, int position = 50)
        addPreWriteCallback(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addPreWriteCallback(self, *args)

    def remPreWriteCallback(self, *args):
        """remPreWriteCallback(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remPreWriteCallback(self, *args)

    def addPostWriteCallback(self, *args):
        """
        addPostWriteCallback(self, ArFunctor functor, int position = 50)
        addPostWriteCallback(self, ArFunctor functor)
        """
        return _ArnlPy.ArServerModeDock_addPostWriteCallback(self, *args)

    def remPostPostWriteCallback(self, *args):
        """remPostPostWriteCallback(self, ArFunctor functor)"""
        return _ArnlPy.ArServerModeDock_remPostPostWriteCallback(self, *args)

    def setDistanceCB(self, *args):
        """setDistanceCB(self, ArRetFunctor2<(double,ArPose,ArPose)> functor)"""
        return _ArnlPy.ArServerModeDock_setDistanceCB(self, *args)

ArServerModeDock_swigregister = _ArnlPy.ArServerModeDock_swigregister
ArServerModeDock_swigregister(ArServerModeDock)

def ArServerModeDock_createDock(*args):
  """
    createDock(ArServerBase serverBase, ArRobot robot, ArLocalizationTask locTask, 
        ArPathPlanningInterface pathTask, 
        ArFunctor shutdownFunctor = None) -> ArServerModeDock
    ArServerModeDock_createDock(ArServerBase serverBase, ArRobot robot, ArLocalizationTask locTask, 
        ArPathPlanningInterface pathTask) -> ArServerModeDock
    """
  return _ArnlPy.ArServerModeDock_createDock(*args)

class ArServerModeDockPioneer(ArServerModeDock):
    """Proxy of C++ ArServerModeDockPioneer class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockPioneer, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockPioneer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockPioneer
    __del__ = lambda self : None;
    def dock(self):
        """dock(self)"""
        return _ArnlPy.ArServerModeDockPioneer_dock(self)

    def undock(self):
        """undock(self)"""
        return _ArnlPy.ArServerModeDockPioneer_undock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockPioneer_checkDock(self)

    def forceUnlock(self):
        """forceUnlock(self)"""
        return _ArnlPy.ArServerModeDockPioneer_forceUnlock(self)

    def deactivate(self):
        """deactivate(self)"""
        return _ArnlPy.ArServerModeDockPioneer_deactivate(self)

ArServerModeDockPioneer_swigregister = _ArnlPy.ArServerModeDockPioneer_swigregister
ArServerModeDockPioneer_swigregister(ArServerModeDockPioneer)

class ArServerModeDockTriangleBump(ArServerModeDock):
    """Proxy of C++ ArServerModeDockTriangleBump class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockTriangleBump, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockTriangleBump, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockTriangleBump
    __del__ = lambda self : None;
    def dock(self):
        """dock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_dock(self)

    def undock(self):
        """undock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_undock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_checkDock(self)

    def forceUnlock(self):
        """forceUnlock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_forceUnlock(self)

    def deactivate(self):
        """deactivate(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_deactivate(self)

    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockTriangleBump_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_disableDock(self)

    def beforeDriveInCallback(self):
        """beforeDriveInCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_beforeDriveInCallback(self)

    def afterDriveOutCallback(self):
        """afterDriveOutCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_afterDriveOutCallback(self)

    def backoutCallback(self):
        """backoutCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBump_backoutCallback(self)

    def setStallsAsBumps(self, *args):
        """setStallsAsBumps(self, bool stallsAsBumps)"""
        return _ArnlPy.ArServerModeDockTriangleBump_setStallsAsBumps(self, *args)

    def getStallsAsBumps(self):
        """getStallsAsBumps(self) -> bool"""
        return _ArnlPy.ArServerModeDockTriangleBump_getStallsAsBumps(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _ArnlPy.ArServerModeDockTriangleBump_addToConfig(self, *args)

ArServerModeDockTriangleBump_swigregister = _ArnlPy.ArServerModeDockTriangleBump_swigregister
ArServerModeDockTriangleBump_swigregister(ArServerModeDockTriangleBump)

class ArServerModeDockPatrolBot(ArServerModeDockTriangleBump):
    """Proxy of C++ ArServerModeDockPatrolBot class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockPatrolBot, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockPatrolBot, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockPatrolBot
    __del__ = lambda self : None;
    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBot_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockPatrolBot_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockPatrolBot_disableDock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockPatrolBot_checkDock(self)

    def beforeDriveInCallback(self):
        """beforeDriveInCallback(self)"""
        return _ArnlPy.ArServerModeDockPatrolBot_beforeDriveInCallback(self)

    def afterDriveOutCallback(self):
        """afterDriveOutCallback(self)"""
        return _ArnlPy.ArServerModeDockPatrolBot_afterDriveOutCallback(self)

ArServerModeDockPatrolBot_swigregister = _ArnlPy.ArServerModeDockPatrolBot_swigregister
ArServerModeDockPatrolBot_swigregister(ArServerModeDockPatrolBot)

class ArServerModeDockPatrolBotNiMH(ArServerModeDockPatrolBot):
    """Proxy of C++ ArServerModeDockPatrolBotNiMH class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDockPatrolBot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockPatrolBotNiMH, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDockPatrolBot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockPatrolBotNiMH, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockPatrolBotNiMH
    __del__ = lambda self : None;
    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_isDocked(self)

    def subclassAddParamsDoneCharging(self, *args):
        """subclassAddParamsDoneCharging(self, ArConfig config, char section) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_subclassAddParamsDoneCharging(self, *args)

    def subclassDoneCharging(self):
        """subclassDoneCharging(self) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_subclassDoneCharging(self)

    def subclassNotDoneCharging(self):
        """subclassNotDoneCharging(self) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_subclassNotDoneCharging(self)

    def subclassNeedsAutoDock(self, *args):
        """subclassNeedsAutoDock(self, char reason, size_t lenOfReason) -> bool"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_subclassNeedsAutoDock(self, *args)

    def subclassGetDockInfoString(self, *args):
        """subclassGetDockInfoString(self, char dockInfoStr, size_t dockInfoStrLength, bool terse)"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_subclassGetDockInfoString(self, *args)

    def setAutoDock(self, *args):
        """setAutoDock(self, bool autoDocking)"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_setAutoDock(self, *args)

    def setNeedBalance(self, *args):
        """setNeedBalance(self, bool needBalance)"""
        return _ArnlPy.ArServerModeDockPatrolBotNiMH_setNeedBalance(self, *args)

ArServerModeDockPatrolBotNiMH_swigregister = _ArnlPy.ArServerModeDockPatrolBotNiMH_swigregister
ArServerModeDockPatrolBotNiMH_swigregister(ArServerModeDockPatrolBotNiMH)

class ArServerModeDockSimulator(ArServerModeDockTriangleBump):
    """Proxy of C++ ArServerModeDockSimulator class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockSimulator, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockSimulator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockSimulator
    __del__ = lambda self : None;
    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockSimulator_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockSimulator_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockSimulator_disableDock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockSimulator_checkDock(self)

ArServerModeDockSimulator_swigregister = _ArnlPy.ArServerModeDockSimulator_swigregister
ArServerModeDockSimulator_swigregister(ArServerModeDockSimulator)

class ArServerModeDockPowerBot(ArServerModeDockTriangleBump):
    """Proxy of C++ ArServerModeDockPowerBot class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockPowerBot, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDockTriangleBump]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockPowerBot, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockPowerBot
    __del__ = lambda self : None;
    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockPowerBot_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockPowerBot_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockPowerBot_disableDock(self)

    def backoutCallback(self):
        """backoutCallback(self)"""
        return _ArnlPy.ArServerModeDockPowerBot_backoutCallback(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _ArnlPy.ArServerModeDockPowerBot_addToConfig(self, *args)

ArServerModeDockPowerBot_swigregister = _ArnlPy.ArServerModeDockPowerBot_swigregister
ArServerModeDockPowerBot_swigregister(ArServerModeDockPowerBot)

class ArServerModeDockTriangleBumpBackwards(ArServerModeDock):
    """Proxy of C++ ArServerModeDockTriangleBumpBackwards class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockTriangleBumpBackwards, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockTriangleBumpBackwards, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockTriangleBumpBackwards
    __del__ = lambda self : None;
    def dock(self):
        """dock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_dock(self)

    def undock(self):
        """undock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_undock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_checkDock(self)

    def forceUnlock(self):
        """forceUnlock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_forceUnlock(self)

    def deactivate(self):
        """deactivate(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_deactivate(self)

    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_disableDock(self)

    def beforeDriveInCallback(self):
        """beforeDriveInCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_beforeDriveInCallback(self)

    def afterDriveOutCallback(self):
        """afterDriveOutCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_afterDriveOutCallback(self)

    def pulloutCallback(self):
        """pulloutCallback(self)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_pulloutCallback(self)

    def setStallsAsBumps(self, *args):
        """setStallsAsBumps(self, bool stallsAsBumps)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_setStallsAsBumps(self, *args)

    def getStallsAsBumps(self):
        """getStallsAsBumps(self) -> bool"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_getStallsAsBumps(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _ArnlPy.ArServerModeDockTriangleBumpBackwards_addToConfig(self, *args)

ArServerModeDockTriangleBumpBackwards_swigregister = _ArnlPy.ArServerModeDockTriangleBumpBackwards_swigregister
ArServerModeDockTriangleBumpBackwards_swigregister(ArServerModeDockTriangleBumpBackwards)

class ArServerModeDockLynx(ArServerModeDockTriangleBumpBackwards):
    """Proxy of C++ ArServerModeDockLynx class"""
    __swig_setmethods__ = {}
    for _s in [ArServerModeDockTriangleBumpBackwards]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArServerModeDockLynx, name, value)
    __swig_getmethods__ = {}
    for _s in [ArServerModeDockTriangleBumpBackwards]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArServerModeDockLynx, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ArnlPy.delete_ArServerModeDockLynx
    __del__ = lambda self : None;
    def restoreFromDockFile(self):
        """restoreFromDockFile(self)"""
        return _ArnlPy.ArServerModeDockLynx_restoreFromDockFile(self)

    def isDocked(self):
        """isDocked(self) -> bool"""
        return _ArnlPy.ArServerModeDockLynx_isDocked(self)

    def enableDock(self):
        """enableDock(self)"""
        return _ArnlPy.ArServerModeDockLynx_enableDock(self)

    def disableDock(self):
        """disableDock(self)"""
        return _ArnlPy.ArServerModeDockLynx_disableDock(self)

    def checkDock(self):
        """checkDock(self)"""
        return _ArnlPy.ArServerModeDockLynx_checkDock(self)

    def beforeDriveInCallback(self):
        """beforeDriveInCallback(self)"""
        return _ArnlPy.ArServerModeDockLynx_beforeDriveInCallback(self)

    def afterDriveOutCallback(self):
        """afterDriveOutCallback(self)"""
        return _ArnlPy.ArServerModeDockLynx_afterDriveOutCallback(self)

ArServerModeDockLynx_swigregister = _ArnlPy.ArServerModeDockLynx_swigregister
ArServerModeDockLynx_swigregister(ArServerModeDockLynx)



